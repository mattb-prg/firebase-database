{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { assert, contains, map, safeGet } from '@firebase/util';\r\nimport { SortedMap } from '../util/SortedMap';\r\nimport { buildChildSet } from './childSet';\r\nimport { KEY_INDEX } from './indexes/KeyIndex';\r\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\r\nimport { NamedNode } from './Node';\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         */\r\n        get: function () {\r\n            assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    };\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = __assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = __assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = safeGet(_this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\r\nexport { IndexMap };\r\n//# sourceMappingURL=IndexMap.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/SortedMap.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/childSet.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/Index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/KeyIndex.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/PriorityIndex.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/Node.ts"],"map":"{\"version\":3,\"file\":\"IndexMap.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/snap/IndexMap.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/snap/IndexMap.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { SortedMap } from '../util/SortedMap';\r\nimport { Index } from './indexes/Index';\r\nimport { NamedNode, Node } from './Node';\r\nexport declare class IndexMap {\r\n    private indexes_;\r\n    private indexSet_;\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default(): IndexMap;\r\n    constructor(indexes_: {\r\n        [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\r\n    }, indexSet_: {\r\n        [k: string]: Index;\r\n    });\r\n    get(indexKey: string): SortedMap<NamedNode, Node> | null;\r\n    hasIndex(indexDefinition: Index): boolean;\r\n    addIndex(indexDefinition: Index, existingChildren: SortedMap<string, Node>): IndexMap;\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode: NamedNode, existingChildren: SortedMap<string, Node>): IndexMap;\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode: NamedNode, existingChildren: SortedMap<string, Node>): IndexMap;\r\n}\r\n"}}
