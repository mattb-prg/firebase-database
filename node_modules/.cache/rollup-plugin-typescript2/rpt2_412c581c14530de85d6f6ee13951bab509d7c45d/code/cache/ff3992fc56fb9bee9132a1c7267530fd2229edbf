{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __extends, __values } from \"tslib\";\r\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\r\nimport { repoAddEventCallbackForQuery, repoGetValue, repoRemoveEventCallbackForQuery, repoServerTime, repoSetWithPriority, repoUpdate } from '../core/Repo';\r\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\r\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\r\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\r\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\r\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\r\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\r\nimport { parseRepoInfo } from '../core/util/libs/parser';\r\nimport { nextPushId } from '../core/util/NextPushId';\r\nimport { Path, pathEquals, pathGetBack, pathGetFront, pathChild, pathParent, pathToUrlEncodedString, pathIsEmpty } from '../core/util/Path';\r\nimport { fatal, MAX_NAME, MIN_NAME, ObjectToUniqueKey } from '../core/util/util';\r\nimport { isValidPriority, validateFirebaseDataArg, validateFirebaseMergeDataArg, validateKey, validatePathString, validatePriority, validateRootPathString, validateUrl, validateWritablePath } from '../core/util/validation';\r\nimport { CancelEvent, DataEvent } from '../core/view/Event';\r\nimport { CallbackContext } from '../core/view/EventRegistration';\r\nimport { QueryParams, queryParamsEndAt, queryParamsEndBefore, queryParamsGetQueryObject, queryParamsLimitToFirst, queryParamsLimitToLast, queryParamsOrderBy, queryParamsStartAfter, queryParamsStartAt } from '../core/view/QueryParams';\r\nimport { OnDisconnect } from './OnDisconnect';\r\n/**\r\n * @internal\r\n */\r\nvar QueryImpl = /** @class */ (function () {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    function QueryImpl(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    Object.defineProperty(QueryImpl.prototype, \"key\", {\r\n        get: function () {\r\n            if (pathIsEmpty(this._path)) {\r\n                return null;\r\n            }\r\n            else {\r\n                return pathGetBack(this._path);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QueryImpl.prototype, \"ref\", {\r\n        get: function () {\r\n            return new ReferenceImpl(this._repo, this._path);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QueryImpl.prototype, \"_queryIdentifier\", {\r\n        get: function () {\r\n            var obj = queryParamsGetQueryObject(this._queryParams);\r\n            var id = ObjectToUniqueKey(obj);\r\n            return id === '{}' ? 'default' : id;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QueryImpl.prototype, \"_queryObject\", {\r\n        /**\r\n         * An object representation of the query parameters used by this Query.\r\n         */\r\n        get: function () {\r\n            return queryParamsGetQueryObject(this._queryParams);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    QueryImpl.prototype.isEqual = function (other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        var sameRepo = this._repo === other._repo;\r\n        var samePath = pathEquals(this._path, other._path);\r\n        var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    QueryImpl.prototype.toJSON = function () {\r\n        return this.toString();\r\n    };\r\n    QueryImpl.prototype.toString = function () {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    };\r\n    return QueryImpl;\r\n}());\r\nexport { QueryImpl };\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    var startNode = null;\r\n    var endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nvar ReferenceImpl = /** @class */ (function (_super) {\r\n    __extends(ReferenceImpl, _super);\r\n    /** @hideconstructor */\r\n    function ReferenceImpl(repo, path) {\r\n        return _super.call(this, repo, path, new QueryParams(), false) || this;\r\n    }\r\n    Object.defineProperty(ReferenceImpl.prototype, \"parent\", {\r\n        get: function () {\r\n            var parentPath = pathParent(this._path);\r\n            return parentPath === null\r\n                ? null\r\n                : new ReferenceImpl(this._repo, parentPath);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReferenceImpl.prototype, \"root\", {\r\n        get: function () {\r\n            var ref = this;\r\n            while (ref.parent !== null) {\r\n                ref = ref.parent;\r\n            }\r\n            return ref;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return ReferenceImpl;\r\n}(QueryImpl));\r\nexport { ReferenceImpl };\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    function DataSnapshot(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    Object.defineProperty(DataSnapshot.prototype, \"priority\", {\r\n        /**\r\n         * Gets the priority value of the data in this `DataSnapshot`.\r\n         *\r\n         * Applications need not use priority but can order collections by\r\n         * ordinary properties (see\r\n         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n         * ).\r\n         */\r\n        get: function () {\r\n            // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n            return this._node.getPriority().val();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        /**\r\n         * The key (last part of the path) of the location of this `DataSnapshot`.\r\n         *\r\n         * The last token in a Database location is considered its key. For example,\r\n         * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n         * `DataSnapshot` will return the key for the location that generated it.\r\n         * However, accessing the key on the root URL of a Database will return\r\n         * `null`.\r\n         */\r\n        get: function () {\r\n            return this.ref.key;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSnapshot.prototype, \"size\", {\r\n        /** Returns the number of child properties of this `DataSnapshot`. */\r\n        get: function () {\r\n            return this._node.numChildren();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    DataSnapshot.prototype.child = function (path) {\r\n        var childPath = new Path(path);\r\n        var childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        return !this._node.isEmpty();\r\n    };\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        return this._node.val(true);\r\n    };\r\n    /**\r\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        var childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, function (key, node) {\r\n            return action(new DataSnapshot(node, child(_this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (path) {\r\n        var childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    };\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    DataSnapshot.prototype.val = function () {\r\n        return this._node.val();\r\n    };\r\n    return DataSnapshot;\r\n}());\r\nexport { DataSnapshot };\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nexport function ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nexport function refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    var parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    var repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nexport function child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nexport function onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nexport function push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    var now = repoServerTime(parent._repo);\r\n    var name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    var thennablePushRef = child(parent, name);\r\n    var pushRef = child(parent, name);\r\n    var promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(function () { return pushRef; });\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nexport function remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nexport function set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    var deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(function () { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nexport function setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    var deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(function () { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nexport function setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    var deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(function () { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nexport function update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    var deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(function () { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nexport function get(query) {\r\n    query = getModularInstance(query);\r\n    var callbackContext = new CallbackContext(function () { });\r\n    var container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(function (node) {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    function ValueEventRegistration(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    };\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var _this = this;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return function () {\r\n                return _this.callbackContext.onCancel(eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            return function () {\r\n                return _this.callbackContext.onValue(eventData.snapshot, null);\r\n            };\r\n        }\r\n    };\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    };\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbackContext !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\nexport { ValueEventRegistration };\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    function ChildEventRegistration(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    };\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        var childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        var index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    };\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var _this = this;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return function () {\r\n                return _this.callbackContext.onCancel(eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            return function () {\r\n                return _this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    };\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return !!this.callbackContext;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\r\nexport { ChildEventRegistration };\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    var cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        var userCallback_1 = callback;\r\n        var onceCallback = function (dataSnapshot, previousChildName) {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback_1(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    var callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    var container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return function () { return repoRemoveEventCallbackForQuery(query._repo, query, container); };\r\n}\r\nexport function onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nexport function onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nexport function onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nexport function onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nexport function onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nexport function off(query, eventType, callback) {\r\n    var container = null;\r\n    var expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nvar QueryConstraint = /** @class */ (function () {\r\n    function QueryConstraint() {\r\n    }\r\n    return QueryConstraint;\r\n}());\r\nexport { QueryConstraint };\r\nvar QueryEndAtConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryEndAtConstraint, _super);\r\n    function QueryEndAtConstraint(_value, _key) {\r\n        var _this = _super.call(this) || this;\r\n        _this._value = _value;\r\n        _this._key = _key;\r\n        return _this;\r\n    }\r\n    QueryEndAtConstraint.prototype._apply = function (query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        var newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    };\r\n    return QueryEndAtConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nexport function endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nvar QueryEndBeforeConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryEndBeforeConstraint, _super);\r\n    function QueryEndBeforeConstraint(_value, _key) {\r\n        var _this = _super.call(this) || this;\r\n        _this._value = _value;\r\n        _this._key = _key;\r\n        return _this;\r\n    }\r\n    QueryEndBeforeConstraint.prototype._apply = function (query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        var newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    };\r\n    return QueryEndBeforeConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nexport function endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nvar QueryStartAtConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryStartAtConstraint, _super);\r\n    function QueryStartAtConstraint(_value, _key) {\r\n        var _this = _super.call(this) || this;\r\n        _this._value = _value;\r\n        _this._key = _key;\r\n        return _this;\r\n    }\r\n    QueryStartAtConstraint.prototype._apply = function (query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        var newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    };\r\n    return QueryStartAtConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nexport function startAt(value, key) {\r\n    if (value === void 0) { value = null; }\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nvar QueryStartAfterConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryStartAfterConstraint, _super);\r\n    function QueryStartAfterConstraint(_value, _key) {\r\n        var _this = _super.call(this) || this;\r\n        _this._value = _value;\r\n        _this._key = _key;\r\n        return _this;\r\n    }\r\n    QueryStartAfterConstraint.prototype._apply = function (query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        var newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    };\r\n    return QueryStartAfterConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nexport function startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nvar QueryLimitToFirstConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryLimitToFirstConstraint, _super);\r\n    function QueryLimitToFirstConstraint(_limit) {\r\n        var _this = _super.call(this) || this;\r\n        _this._limit = _limit;\r\n        return _this;\r\n    }\r\n    QueryLimitToFirstConstraint.prototype._apply = function (query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    };\r\n    return QueryLimitToFirstConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nexport function limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nvar QueryLimitToLastConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryLimitToLastConstraint, _super);\r\n    function QueryLimitToLastConstraint(_limit) {\r\n        var _this = _super.call(this) || this;\r\n        _this._limit = _limit;\r\n        return _this;\r\n    }\r\n    QueryLimitToLastConstraint.prototype._apply = function (query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    };\r\n    return QueryLimitToLastConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nexport function limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nvar QueryOrderByChildConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryOrderByChildConstraint, _super);\r\n    function QueryOrderByChildConstraint(_path) {\r\n        var _this = _super.call(this) || this;\r\n        _this._path = _path;\r\n        return _this;\r\n    }\r\n    QueryOrderByChildConstraint.prototype._apply = function (query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        var parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    };\r\n    return QueryOrderByChildConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nexport function orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nvar QueryOrderByKeyConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryOrderByKeyConstraint, _super);\r\n    function QueryOrderByKeyConstraint() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QueryOrderByKeyConstraint.prototype._apply = function (query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        var newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    };\r\n    return QueryOrderByKeyConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nexport function orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nvar QueryOrderByPriorityConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryOrderByPriorityConstraint, _super);\r\n    function QueryOrderByPriorityConstraint() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QueryOrderByPriorityConstraint.prototype._apply = function (query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        var newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    };\r\n    return QueryOrderByPriorityConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nexport function orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nvar QueryOrderByValueConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryOrderByValueConstraint, _super);\r\n    function QueryOrderByValueConstraint() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QueryOrderByValueConstraint.prototype._apply = function (query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        var newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    };\r\n    return QueryOrderByValueConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nexport function orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nvar QueryEqualToValueConstraint = /** @class */ (function (_super) {\r\n    __extends(QueryEqualToValueConstraint, _super);\r\n    function QueryEqualToValueConstraint(_value, _key) {\r\n        var _this = _super.call(this) || this;\r\n        _this._value = _value;\r\n        _this._key = _key;\r\n        return _this;\r\n    }\r\n    QueryEqualToValueConstraint.prototype._apply = function (query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    };\r\n    return QueryEqualToValueConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nexport function equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nexport function query(query) {\r\n    var e_1, _a;\r\n    var queryConstraints = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        queryConstraints[_i - 1] = arguments[_i];\r\n    }\r\n    var queryImpl = getModularInstance(query);\r\n    try {\r\n        for (var queryConstraints_1 = __values(queryConstraints), queryConstraints_1_1 = queryConstraints_1.next(); !queryConstraints_1_1.done; queryConstraints_1_1 = queryConstraints_1.next()) {\r\n            var constraint = queryConstraints_1_1.value;\r\n            queryImpl = constraint._apply(queryImpl);\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (queryConstraints_1_1 && !queryConstraints_1_1.done && (_a = queryConstraints_1.return)) _a.call(queryConstraints_1);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\r\n//# sourceMappingURL=Reference_impl.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/Repo.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/ChildrenNode.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/Index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/KeyIndex.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/PathIndex.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/PriorityIndex.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/ValueIndex.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/Node.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/SyncPoint.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/SyncTree.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/libs/parser.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/NextPushId.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/validation.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/Change.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/Event.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/EventRegistration.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/QueryParams.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/api/Database.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/api/OnDisconnect.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/api/Reference.ts"],"map":"{\"version\":3,\"file\":\"Reference_impl.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/api/Reference_impl.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/api/Reference_impl.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Repo } from '../core/Repo';\r\nimport { Index } from '../core/snap/indexes/Index';\r\nimport { Node } from '../core/snap/Node';\r\nimport { Path } from '../core/util/Path';\r\nimport { Change } from '../core/view/Change';\r\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\r\nimport { CallbackContext, EventRegistration, QueryContext } from '../core/view/EventRegistration';\r\nimport { QueryParams } from '../core/view/QueryParams';\r\nimport { Database } from './Database';\r\nimport { OnDisconnect } from './OnDisconnect';\r\nimport { ListenOptions, Query as Query, DatabaseReference, Unsubscribe, ThenableReference } from './Reference';\r\n/**\r\n * @internal\r\n */\r\nexport declare class QueryImpl implements Query, QueryContext {\r\n    readonly _repo: Repo;\r\n    readonly _path: Path;\r\n    readonly _queryParams: QueryParams;\r\n    readonly _orderByCalled: boolean;\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo: Repo, _path: Path, _queryParams: QueryParams, _orderByCalled: boolean);\r\n    get key(): string | null;\r\n    get ref(): DatabaseReference;\r\n    get _queryIdentifier(): string;\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject(): object;\r\n    isEqual(other: QueryImpl | null): boolean;\r\n    toJSON(): string;\r\n    toString(): string;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport declare class ReferenceImpl extends QueryImpl implements DatabaseReference {\r\n    /** @hideconstructor */\r\n    constructor(repo: Repo, path: Path);\r\n    get parent(): ReferenceImpl | null;\r\n    get root(): ReferenceImpl;\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nexport declare class DataSnapshot {\r\n    readonly _node: Node;\r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    readonly ref: DatabaseReference;\r\n    readonly _index: Index;\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node: Node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref: DatabaseReference, _index: Index);\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority(): string | number | null;\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key(): string | null;\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size(): number;\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path: string): DataSnapshot;\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists(): boolean;\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    exportVal(): any;\r\n    /**\r\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean;\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path: string): boolean;\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren(): boolean;\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON(): object | null;\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    val(): any;\r\n}\r\n/**\r\n * Represents a child snapshot of a `Reference` that is being iterated over. The key will never be undefined.\r\n */\r\nexport interface IteratedDataSnapshot extends DataSnapshot {\r\n    key: string;\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nexport declare function ref(db: Database, path?: string): DatabaseReference;\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nexport declare function refFromURL(db: Database, url: string): DatabaseReference;\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nexport declare function child(parent: DatabaseReference, path: string): DatabaseReference;\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nexport declare function onDisconnect(ref: DatabaseReference): OnDisconnect;\r\nexport interface ThenableReferenceImpl extends ReferenceImpl, Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nexport declare function push(parent: DatabaseReference, value?: unknown): ThenableReference;\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nexport declare function remove(ref: DatabaseReference): Promise<void>;\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nexport declare function set(ref: DatabaseReference, value: unknown): Promise<void>;\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nexport declare function setPriority(ref: DatabaseReference, priority: string | number | null): Promise<void>;\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nexport declare function setWithPriority(ref: DatabaseReference, value: unknown, priority: string | number | null): Promise<void>;\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nexport declare function update(ref: DatabaseReference, values: object): Promise<void>;\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nexport declare function get(query: Query): Promise<DataSnapshot>;\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nexport declare class ValueEventRegistration implements EventRegistration {\r\n    private callbackContext;\r\n    constructor(callbackContext: CallbackContext);\r\n    respondsTo(eventType: string): boolean;\r\n    createEvent(change: Change, query: QueryContext): DataEvent;\r\n    getEventRunner(eventData: CancelEvent | DataEvent): () => void;\r\n    createCancelEvent(error: Error, path: Path): CancelEvent | null;\r\n    matches(other: EventRegistration): boolean;\r\n    hasAnyCallback(): boolean;\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nexport declare class ChildEventRegistration implements EventRegistration {\r\n    private eventType;\r\n    private callbackContext;\r\n    constructor(eventType: string, callbackContext: CallbackContext | null);\r\n    respondsTo(eventType: string): boolean;\r\n    createCancelEvent(error: Error, path: Path): CancelEvent | null;\r\n    createEvent(change: Change, query: QueryContext): DataEvent;\r\n    getEventRunner(eventData: CancelEvent | DataEvent): () => void;\r\n    matches(other: EventRegistration): boolean;\r\n    hasAnyCallback(): boolean;\r\n}\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onValue` event will trigger once with the initial data stored at this\r\n * location, and then trigger again each time the data changes. The\r\n * `DataSnapshot` passed to the callback will be for the location at which\r\n * `on()` was called. It won't trigger until the entire contents has been\r\n * synchronized. If the location has no data, it will be triggered with an empty\r\n * `DataSnapshot` (`val()` will return `null`).\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs. The\r\n * callback will be passed a DataSnapshot.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onValue` event will trigger once with the initial data stored at this\r\n * location, and then trigger again each time the data changes. The\r\n * `DataSnapshot` passed to the callback will be for the location at which\r\n * `on()` was called. It won't trigger until the entire contents has been\r\n * synchronized. If the location has no data, it will be triggered with an empty\r\n * `DataSnapshot` (`val()` will return `null`).\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs. The\r\n * callback will be passed a DataSnapshot.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onValue` event will trigger once with the initial data stored at this\r\n * location, and then trigger again each time the data changes. The\r\n * `DataSnapshot` passed to the callback will be for the location at which\r\n * `on()` was called. It won't trigger until the entire contents has been\r\n * synchronized. If the location has no data, it will be triggered with an empty\r\n * `DataSnapshot` (`val()` will return `null`).\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs. The\r\n * callback will be passed a DataSnapshot.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildAdded` event will be triggered once for each initial child at this\r\n * location, and it will be triggered again every time a new child is added. The\r\n * `DataSnapshot` passed into the callback will reflect the data for the\r\n * relevant child. For ordering purposes, it is passed a second argument which\r\n * is a string containing the key of the previous sibling child by sort order,\r\n * or `null` if it is the first child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName?: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildAdded` event will be triggered once for each initial child at this\r\n * location, and it will be triggered again every time a new child is added. The\r\n * `DataSnapshot` passed into the callback will reflect the data for the\r\n * relevant child. For ordering purposes, it is passed a second argument which\r\n * is a string containing the key of the previous sibling child by sort order,\r\n * or `null` if it is the first child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildAdded` event will be triggered once for each initial child at this\r\n * location, and it will be triggered again every time a new child is added. The\r\n * `DataSnapshot` passed into the callback will reflect the data for the\r\n * relevant child. For ordering purposes, it is passed a second argument which\r\n * is a string containing the key of the previous sibling child by sort order,\r\n * or `null` if it is the first child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildChanged` event will be triggered when the data stored in a child\r\n * (or any of its descendants) changes. Note that a single `child_changed` event\r\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\r\n * callback will contain the new child contents. For ordering purposes, the\r\n * callback is also passed a second argument which is a string containing the\r\n * key of the previous sibling child by sort order, or `null` if it is the first\r\n * child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildChanged` event will be triggered when the data stored in a child\r\n * (or any of its descendants) changes. Note that a single `child_changed` event\r\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\r\n * callback will contain the new child contents. For ordering purposes, the\r\n * callback is also passed a second argument which is a string containing the\r\n * key of the previous sibling child by sort order, or `null` if it is the first\r\n * child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildChanged` event will be triggered when the data stored in a child\r\n * (or any of its descendants) changes. Note that a single `child_changed` event\r\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\r\n * callback will contain the new child contents. For ordering purposes, the\r\n * callback is also passed a second argument which is a string containing the\r\n * key of the previous sibling child by sort order, or `null` if it is the first\r\n * child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildMoved` event will be triggered when a child's sort order changes\r\n * such that its position relative to its siblings changes. The `DataSnapshot`\r\n * passed to the callback will be for the data of the child that has moved. It\r\n * is also passed a second argument which is a string containing the key of the\r\n * previous sibling child by sort order, or `null` if it is the first child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildMoved` event will be triggered when a child's sort order changes\r\n * such that its position relative to its siblings changes. The `DataSnapshot`\r\n * passed to the callback will be for the data of the child that has moved. It\r\n * is also passed a second argument which is a string containing the key of the\r\n * previous sibling child by sort order, or `null` if it is the first child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildMoved` event will be triggered when a child's sort order changes\r\n * such that its position relative to its siblings changes. The `DataSnapshot`\r\n * passed to the callback will be for the data of the child that has moved. It\r\n * is also passed a second argument which is a string containing the key of the\r\n * previous sibling child by sort order, or `null` if it is the first child.\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildRemoved` event will be triggered once every time a child is\r\n * removed. The `DataSnapshot` passed into the callback will be the old data for\r\n * the child that was removed. A child will get removed when either:\r\n *\r\n * - a client explicitly calls `remove()` on that child or one of its ancestors\r\n * - a client calls `set(null)` on that child or one of its ancestors\r\n * - that child has all of its children removed\r\n * - there is a query in effect which now filters out the child (because it's\r\n *   sort order changed or the max limit was hit)\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildRemoved` event will be triggered once every time a child is\r\n * removed. The `DataSnapshot` passed into the callback will be the old data for\r\n * the child that was removed. A child will get removed when either:\r\n *\r\n * - a client explicitly calls `remove()` on that child or one of its ancestors\r\n * - a client calls `set(null)` on that child or one of its ancestors\r\n * - that child has all of its children removed\r\n * - there is a query in effect which now filters out the child (because it's\r\n *   sort order changed or the max limit was hit)\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, options: ListenOptions): Unsubscribe;\r\n/**\r\n * Listens for data changes at a particular location.\r\n *\r\n * This is the primary way to read data from a Database. Your callback\r\n * will be triggered for the initial data and again whenever the data changes.\r\n * Invoke the returned unsubscribe callback to stop receiving updates. See\r\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\r\n * for more details.\r\n *\r\n * An `onChildRemoved` event will be triggered once every time a child is\r\n * removed. The `DataSnapshot` passed into the callback will be the old data for\r\n * the child that was removed. A child will get removed when either:\r\n *\r\n * - a client explicitly calls `remove()` on that child or one of its ancestors\r\n * - a client calls `set(null)` on that child or one of its ancestors\r\n * - that child has all of its children removed\r\n * - there is a query in effect which now filters out the child (because it's\r\n *   sort order changed or the max limit was hit)\r\n *\r\n * @param query - The query to run.\r\n * @param callback - A callback that fires when the specified event occurs.\r\n * The callback will be passed a DataSnapshot and a string containing the key of\r\n * the previous child, by sort order, or `null` if it is the first child.\r\n * @param cancelCallback - An optional callback that will be notified if your\r\n * event subscription is ever canceled because your client does not have\r\n * permission to read this data (or it had permission but has now lost it).\r\n * This callback will be passed an `Error` object indicating why the failure\r\n * occurred.\r\n * @param options - An object that can be used to configure `onlyOnce`, which\r\n * then removes the listener after its first invocation.\r\n * @returns A function that can be invoked to remove the listener.\r\n */\r\nexport declare function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\r\nexport { EventType };\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nexport declare function off(query: Query, eventType?: EventType, callback?: (snapshot: DataSnapshot, previousChildName?: string | null) => unknown): void;\r\n/** Describes the different query constraints available in this SDK. */\r\nexport declare type QueryConstraintType = 'endAt' | 'endBefore' | 'startAt' | 'startAfter' | 'limitToFirst' | 'limitToLast' | 'orderByChild' | 'orderByKey' | 'orderByPriority' | 'orderByValue' | 'equalTo';\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nexport declare abstract class QueryConstraint {\r\n    /** The type of this query constraints */\r\n    abstract readonly type: QueryConstraintType;\r\n    /**\r\n     * Takes the provided `Query` and returns a copy of the `Query` with this\r\n     * `QueryConstraint` applied.\r\n     */\r\n    abstract _apply<T>(query: QueryImpl): QueryImpl;\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nexport declare function endAt(value: number | string | boolean | null, key?: string): QueryConstraint;\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nexport declare function endBefore(value: number | string | boolean | null, key?: string): QueryConstraint;\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nexport declare function startAt(value?: number | string | boolean | null, key?: string): QueryConstraint;\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nexport declare function startAfter(value: number | string | boolean | null, key?: string): QueryConstraint;\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nexport declare function limitToFirst(limit: number): QueryConstraint;\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nexport declare function limitToLast(limit: number): QueryConstraint;\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nexport declare function orderByChild(path: string): QueryConstraint;\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nexport declare function orderByKey(): QueryConstraint;\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nexport declare function orderByPriority(): QueryConstraint;\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nexport declare function orderByValue(): QueryConstraint;\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nexport declare function equalTo(value: number | string | boolean | null, key?: string): QueryConstraint;\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nexport declare function query(query: Query, ...queryConstraints: QueryConstraint[]): Query;\r\n"}}
