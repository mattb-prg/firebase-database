{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\r\nexport { NamedNode };\r\n//# sourceMappingURL=Node.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/Index.ts"],"map":"{\"version\":3,\"file\":\"Node.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/snap/Node.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAkIH;IACE,mBAAmB,IAAY,EAAS,IAAU;QAA/B,SAAI,GAAJ,IAAI,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAE/C,cAAI,GAAX,UAAY,IAAY,EAAE,IAAU;QAClC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IACH,gBAAC;AAAD,CAAC,AAND,IAMC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/snap/Node.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Path } from '../util/Path';\r\nimport { Index } from './indexes/Index';\r\n/**\r\n * Node is an interface defining the common functionality for nodes in\r\n * a DataSnapshot.\r\n *\r\n * @interface\r\n */\r\nexport interface Node {\r\n    /**\r\n     * Whether this node is a leaf node.\r\n     * @returns Whether this is a leaf node.\r\n     */\r\n    isLeafNode(): boolean;\r\n    /**\r\n     * Gets the priority of the node.\r\n     * @returns The priority of the node.\r\n     */\r\n    getPriority(): Node;\r\n    /**\r\n     * Returns a duplicate node with the new priority.\r\n     * @param newPriorityNode - New priority to set for the node.\r\n     * @returns Node with new priority.\r\n     */\r\n    updatePriority(newPriorityNode: Node): Node;\r\n    /**\r\n     * Returns the specified immediate child, or null if it doesn't exist.\r\n     * @param childName - The name of the child to retrieve.\r\n     * @returns The retrieved child, or an empty node.\r\n     */\r\n    getImmediateChild(childName: string): Node;\r\n    /**\r\n     * Returns a child by path, or null if it doesn't exist.\r\n     * @param path - The path of the child to retrieve.\r\n     * @returns The retrieved child or an empty node.\r\n     */\r\n    getChild(path: Path): Node;\r\n    /**\r\n     * Returns the name of the child immediately prior to the specified childNode, or null.\r\n     * @param childName - The name of the child to find the predecessor of.\r\n     * @param childNode - The node to find the predecessor of.\r\n     * @param index - The index to use to determine the predecessor\r\n     * @returns The name of the predecessor child, or null if childNode is the first child.\r\n     */\r\n    getPredecessorChildName(childName: string, childNode: Node, index: Index): string | null;\r\n    /**\r\n     * Returns a duplicate node, with the specified immediate child updated.\r\n     * Any value in the node will be removed.\r\n     * @param childName - The name of the child to update.\r\n     * @param newChildNode - The new child node\r\n     * @returns The updated node.\r\n     */\r\n    updateImmediateChild(childName: string, newChildNode: Node): Node;\r\n    /**\r\n     * Returns a duplicate node, with the specified child updated.  Any value will\r\n     * be removed.\r\n     * @param path - The path of the child to update.\r\n     * @param newChildNode - The new child node, which may be an empty node\r\n     * @returns The updated node.\r\n     */\r\n    updateChild(path: Path, newChildNode: Node): Node;\r\n    /**\r\n     * True if the immediate child specified exists\r\n     */\r\n    hasChild(childName: string): boolean;\r\n    /**\r\n     * @returns True if this node has no value or children.\r\n     */\r\n    isEmpty(): boolean;\r\n    /**\r\n     * @returns The number of children of this node.\r\n     */\r\n    numChildren(): number;\r\n    /**\r\n     * Calls action for each child.\r\n     * @param action - Action to be called for\r\n     * each child.  It's passed the child name and the child node.\r\n     * @returns The first truthy value return by action, or the last falsey one\r\n     */\r\n    forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\r\n    /**\r\n     * @param exportFormat - True for export format (also wire protocol format).\r\n     * @returns Value of this node as JSON.\r\n     */\r\n    val(exportFormat?: boolean): unknown;\r\n    /**\r\n     * @returns hash representing the node contents.\r\n     */\r\n    hash(): string;\r\n    /**\r\n     * @param other - Another node\r\n     * @returns -1 for less than, 0 for equal, 1 for greater than other\r\n     */\r\n    compareTo(other: Node): number;\r\n    /**\r\n     * @returns Whether or not this snapshot equals other\r\n     */\r\n    equals(other: Node): boolean;\r\n    /**\r\n     * @returns This node, with the specified index now available\r\n     */\r\n    withIndex(indexDefinition: Index): Node;\r\n    isIndexed(indexDefinition: Index): boolean;\r\n}\r\nexport declare class NamedNode {\r\n    name: string;\r\n    node: Node;\r\n    constructor(name: string, node: Node);\r\n    static Wrap(name: string, node: Node): NamedNode;\r\n}\r\n"}}
