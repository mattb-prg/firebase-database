{"code":"import { __read, __spreadArray } from \"tslib\";\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { _getProvider, getApp } from '@firebase/app';\r\nimport { getModularInstance, createMockUserToken, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\r\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\r\nimport { EmulatorTokenProvider, FirebaseAuthTokenProvider } from '../core/AuthTokenProvider';\r\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\r\nimport { RepoInfo } from '../core/RepoInfo';\r\nimport { parseRepoInfo } from '../core/util/libs/parser';\r\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\r\nimport { warn, fatal, log, enableLogging as enableLoggingImpl } from '../core/util/util';\r\nimport { validateUrl } from '../core/util/validation';\r\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\r\nimport { TransportManager } from '../realtime/TransportManager';\r\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\r\nimport { ReferenceImpl } from './Reference_impl';\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nvar repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nvar useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(\"\".concat(host, \":\").concat(port), \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nexport function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    var dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = \"\".concat(app.options.projectId, \"-default-rtdb.firebaseio.com\");\r\n    }\r\n    var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    var repoInfo = parsedUrl.repoInfo;\r\n    var isEmulator;\r\n    var dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = \"http://\".concat(dbEmulatorHost, \"?ns=\").concat(repoInfo.namespace);\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    var authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    var appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(\"Database \".concat(appName, \"(\").concat(repo.repoInfo_, \") has already been deleted.\"));\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    var appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    var repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nexport function repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function Database(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    Object.defineProperty(Database.prototype, \"_repo\", {\r\n        get: function () {\r\n            if (!this._instanceStarted) {\r\n                repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n                this._instanceStarted = true;\r\n            }\r\n            return this._repoInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Database.prototype, \"_root\", {\r\n        get: function () {\r\n            if (!this._rootInternal) {\r\n                this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n            }\r\n            return this._rootInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Database.prototype._delete = function () {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n    Database.prototype._checkNotDeleted = function (apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nexport { Database };\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nexport function forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nexport function forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nexport function getDatabase(app, url) {\r\n    if (app === void 0) { app = getApp(); }\r\n    var db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        var emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator.apply(void 0, __spreadArray([db], __read(emulator), false));\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nexport function connectDatabaseEmulator(db, host, port, options) {\r\n    if (options === void 0) { options = {}; }\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    var repo = db._repoInternal;\r\n    var tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        var token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nexport function goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nexport function goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nexport function enableLogging(logger, persistent) {\r\n    enableLoggingImpl(logger, persistent);\r\n}\r\n//# sourceMappingURL=Database.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/app/dist/app/src/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/app-check-interop-types/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth-interop-types/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/component/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/AppCheckTokenProvider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/AuthTokenProvider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/Repo.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/RepoInfo.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/libs/parser.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/validation.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/realtime/BrowserPollConnection.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/realtime/TransportManager.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/realtime/WebSocketConnection.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/api/Reference_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"Database.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/api/Database.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/api/Database.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { _FirebaseService, FirebaseApp } from '@firebase/app';\r\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\r\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\r\nimport { Provider } from '@firebase/component';\r\nimport { EmulatorMockTokenOptions } from '@firebase/util';\r\nimport { Repo } from '../core/Repo';\r\nimport { ReferenceImpl } from './Reference_impl';\r\nexport { EmulatorMockTokenOptions } from '@firebase/util';\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nexport declare function repoManagerDatabaseFromApp(app: FirebaseApp, authProvider: Provider<FirebaseAuthInternalName>, appCheckProvider?: Provider<AppCheckInternalComponentName>, url?: string, nodeAdmin?: boolean): Database;\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nexport declare function repoManagerForceRestClient(forceRestClient: boolean): void;\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nexport declare class Database implements _FirebaseService {\r\n    _repoInternal: Repo;\r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    readonly app: FirebaseApp;\r\n    /** Represents a `Database` instance. */\r\n    readonly 'type' = \"database\";\r\n    /** Track if the instance has been used (root or repo accessed) */\r\n    _instanceStarted: boolean;\r\n    /** Backing state for root_ */\r\n    private _rootInternal?;\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal: Repo, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app: FirebaseApp);\r\n    get _repo(): Repo;\r\n    get _root(): ReferenceImpl;\r\n    _delete(): Promise<void>;\r\n    _checkNotDeleted(apiName: string): void;\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nexport declare function forceWebSockets(): void;\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nexport declare function forceLongPolling(): void;\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nexport declare function getDatabase(app?: FirebaseApp, url?: string): Database;\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nexport declare function connectDatabaseEmulator(db: Database, host: string, port: number, options?: {\r\n    mockUserToken?: EmulatorMockTokenOptions | string;\r\n}): void;\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nexport declare function goOffline(db: Database): void;\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nexport declare function goOnline(db: Database): void;\r\n/**\r\n * Logs debugging information to the console.\r\n *\r\n * @param enabled - Enables logging if `true`, disables logging if `false`.\r\n * @param persistent - Remembers the logging state between page refreshes if\r\n * `true`.\r\n */\r\nexport declare function enableLogging(enabled: boolean, persistent?: boolean): any;\r\n/**\r\n * Logs debugging information to the console.\r\n *\r\n * @param logger - A custom logger function to control how things get logged.\r\n */\r\nexport declare function enableLogging(logger: (message: string) => unknown): any;\r\n"}}
