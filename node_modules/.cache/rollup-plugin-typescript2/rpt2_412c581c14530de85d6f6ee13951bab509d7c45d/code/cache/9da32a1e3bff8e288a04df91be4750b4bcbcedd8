{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { assert, assertionError } from '@firebase/util';\r\nimport { nameCompare, MAX_NAME } from '../../util/util';\r\nimport { NamedNode } from '../Node';\r\nimport { Index } from './Index';\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    __extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    KeyIndex.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nexport { KeyIndex };\r\nexport var KEY_INDEX = new KeyIndex();\r\n//# sourceMappingURL=KeyIndex.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/ChildrenNode.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/Node.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/indexes/Index.ts"],"map":"{\"version\":3,\"file\":\"KeyIndex.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/core/snap/indexes/KeyIndex.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAExD,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAExD,OAAO,EAAQ,SAAS,EAAE,MAAM,SAAS,CAAC;AAE1C,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,IAAI,YAA0B,CAAC;AAE/B;IAA8B,4BAAK;IAAnC;;IA4CA,CAAC;IA3CC,sBAAW,wBAAY;aAAvB;YACE,OAAO,YAAY,CAAC;QACtB,CAAC;aAED,UAAwB,GAAG;YACzB,YAAY,GAAG,GAAG,CAAC;QACrB,CAAC;;;OAJA;IAKD,0BAAO,GAAP,UAAQ,CAAY,EAAE,CAAY;QAChC,OAAO,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IACD,8BAAW,GAAX,UAAY,IAAU;QACpB,yFAAyF;QACzF,yCAAyC;QACzC,MAAM,cAAc,CAAC,iDAAiD,CAAC,CAAC;IAC1E,CAAC;IACD,sCAAmB,GAAnB,UAAoB,OAAa,EAAE,OAAa;QAC9C,OAAO,KAAK,CAAC,CAAC,oCAAoC;IACpD,CAAC;IACD,0BAAO,GAAP;QACE,8DAA8D;QAC9D,OAAQ,SAAiB,CAAC,GAAG,CAAC;IAChC,CAAC;IACD,0BAAO,GAAP;QACE,gFAAgF;QAChF,qEAAqE;QACrE,OAAO,IAAI,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAC/C,CAAC;IAED,2BAAQ,GAAR,UAAS,UAAkB,EAAE,IAAY;QACvC,MAAM,CACJ,OAAO,UAAU,KAAK,QAAQ,EAC9B,8CAA8C,CAC/C,CAAC;QACF,gGAAgG;QAChG,OAAO,IAAI,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,2BAAQ,GAAR;QACE,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,eAAC;AAAD,CAAC,AA5CD,CAA8B,KAAK,GA4ClC;;AAED,MAAM,CAAC,IAAM,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/snap/indexes/KeyIndex.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { ChildrenNode } from '../ChildrenNode';\r\nimport { Node, NamedNode } from '../Node';\r\nimport { Index } from './Index';\r\nexport declare class KeyIndex extends Index {\r\n    static get __EMPTY_NODE(): ChildrenNode;\r\n    static set __EMPTY_NODE(val: ChildrenNode);\r\n    compare(a: NamedNode, b: NamedNode): number;\r\n    isDefinedOn(node: Node): boolean;\r\n    indexedValueChanged(oldNode: Node, newNode: Node): boolean;\r\n    minPost(): any;\r\n    maxPost(): NamedNode;\r\n    makePost(indexValue: string, name: string): NamedNode;\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString(): string;\r\n}\r\nexport declare const KEY_INDEX: KeyIndex;\r\n"}}
