{"code":"/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { warn } from './util/util';\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nvar AppCheckTokenProvider = /** @class */ (function () {\r\n    function AppCheckTokenProvider(appName_, appCheckProvider) {\r\n        var _this = this;\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(function (appCheck) { return (_this.appCheck = appCheck); });\r\n        }\r\n    }\r\n    AppCheckTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        var _this = this;\r\n        if (!this.appCheck) {\r\n            return new Promise(function (resolve, reject) {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(function () {\r\n                    if (_this.appCheck) {\r\n                        _this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    };\r\n    AppCheckTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(function (appCheck) { return appCheck.addTokenListener(listener); });\r\n    };\r\n    AppCheckTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        warn(\"Provided AppCheck credentials for the app named \\\"\".concat(this.appName_, \"\\\" \") +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    };\r\n    return AppCheckTokenProvider;\r\n}());\r\nexport { AppCheckTokenProvider };\r\n//# sourceMappingURL=AppCheckTokenProvider.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/app-check-interop-types/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/component/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts"],"map":"{\"version\":3,\"file\":\"AppCheckTokenProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/core/AppCheckTokenProvider.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAUH,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AAEnC;;GAEG;AACH;IAEE,+BACU,QAAgB,EAChB,gBAA0D;QAFpE,iBAQC;QAPS,aAAQ,GAAR,QAAQ,CAAQ;QAChB,qBAAgB,GAAhB,gBAAgB,CAA0C;QAElE,IAAI,CAAC,QAAQ,GAAG,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,YAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,GAAG,GAAG,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,EAA1B,CAA0B,CAAC,CAAC;SACtE;IACH,CAAC;IAED,wCAAQ,GAAR,UAAS,YAAsB;QAA/B,iBAiBC;QAhBC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,IAAI,OAAO,CAAsB,UAAC,OAAO,EAAE,MAAM;gBACtD,sEAAsE;gBACtE,oEAAoE;gBACpE,sEAAsE;gBACtE,uDAAuD;gBACvD,UAAU,CAAC;oBACT,IAAI,KAAI,CAAC,QAAQ,EAAE;wBACjB,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;qBACnD;yBAAM;wBACL,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf;gBACH,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;IAED,sDAAsB,GAAtB,UAAuB,QAA+B;;QACpD,MAAA,IAAI,CAAC,gBAAgB,0CACjB,GAAG,GACJ,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAnC,CAAmC,CAAC,CAAC;IAC3D,CAAC;IAED,qDAAqB,GAArB;QACE,IAAI,CACF,4DAAoD,IAAI,CAAC,QAAQ,QAAI;YACnE,6EAA6E,CAChF,CAAC;IACJ,CAAC;IACH,4BAAC;AAAD,CAAC,AA3CD,IA2CC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/AppCheckTokenProvider.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AppCheckInternalComponentName, AppCheckTokenListener, AppCheckTokenResult } from '@firebase/app-check-interop-types';\r\nimport { Provider } from '@firebase/component';\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nexport declare class AppCheckTokenProvider {\r\n    private appName_;\r\n    private appCheckProvider?;\r\n    private appCheck?;\r\n    constructor(appName_: string, appCheckProvider?: Provider<AppCheckInternalComponentName>);\r\n    getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult>;\r\n    addTokenChangeListener(listener: AppCheckTokenListener): void;\r\n    notifyForInvalidToken(): void;\r\n}\r\n"}}
