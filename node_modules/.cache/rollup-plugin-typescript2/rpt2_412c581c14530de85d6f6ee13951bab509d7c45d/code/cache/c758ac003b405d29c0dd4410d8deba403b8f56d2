{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { assert } from '@firebase/util';\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nvar CallbackContext = /** @class */ (function () {\r\n    function CallbackContext(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    CallbackContext.prototype.onValue = function (expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    };\r\n    CallbackContext.prototype.onCancel = function (error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    };\r\n    Object.defineProperty(CallbackContext.prototype, \"hasCancelCallback\", {\r\n        get: function () {\r\n            return !!this.cancelCallback;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    CallbackContext.prototype.matches = function (other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    };\r\n    return CallbackContext;\r\n}());\r\nexport { CallbackContext };\r\n//# sourceMappingURL=EventRegistration.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/api/Reference_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/Repo.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/Change.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/Event.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/QueryParams.ts"],"map":"{\"version\":3,\"file\":\"EventRegistration.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/view/EventRegistration.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAwBxC;;;;;GAKG;AACH;IACE,yBACmB,gBAA8B,EAC9B,cAA0C;QAD1C,qBAAgB,GAAhB,gBAAgB,CAAc;QAC9B,mBAAc,GAAd,cAAc,CAA4B;IAC1D,CAAC;IAEJ,iCAAO,GAAP,UACE,eAA6B,EAC7B,iBAAiC;QAEjC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,EAAE,iBAAiB,CAAC,CAAC;IACvE,CAAC;IAED,kCAAQ,GAAR,UAAS,KAAY;QACnB,MAAM,CACJ,IAAI,CAAC,iBAAiB,EACtB,8DAA8D,CAC/D,CAAC;QACF,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED,sBAAI,8CAAiB;aAArB;YACE,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;;;OAAA;IAED,iCAAO,GAAP,UAAQ,KAAsB;QAC5B,OAAO,CACL,IAAI,CAAC,gBAAgB,KAAK,KAAK,CAAC,gBAAgB;YAChD,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,KAAK,SAAS;gBAC/C,IAAI,CAAC,gBAAgB,CAAC,YAAY;oBAChC,KAAK,CAAC,gBAAgB,CAAC,YAAY;gBACrC,IAAI,CAAC,gBAAgB,CAAC,OAAO,KAAK,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,CACpE,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AAlCD,IAkCC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/view/EventRegistration.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { DataSnapshot } from '../../api/Reference_impl';\r\nimport { Repo } from '../Repo';\r\nimport { Path } from '../util/Path';\r\nimport { Change } from './Change';\r\nimport { CancelEvent, Event } from './Event';\r\nimport { QueryParams } from './QueryParams';\r\n/**\r\n * A user callback. Callbacks issues from the Legacy SDK maintain references\r\n * to the original user-issued callbacks, which allows equality\r\n * comparison by reference even though this callbacks are wrapped before\r\n * they can be passed to the firebase@exp SDK.\r\n *\r\n * @internal\r\n */\r\nexport interface UserCallback {\r\n    (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\r\n    userCallback?: unknown;\r\n    context?: object | null;\r\n}\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nexport declare class CallbackContext {\r\n    private readonly snapshotCallback;\r\n    private readonly cancelCallback?;\r\n    constructor(snapshotCallback: UserCallback, cancelCallback?: (error: Error) => unknown);\r\n    onValue(expDataSnapshot: DataSnapshot, previousChildName?: string | null): void;\r\n    onCancel(error: Error): void;\r\n    get hasCancelCallback(): boolean;\r\n    matches(other: CallbackContext): boolean;\r\n}\r\nexport interface QueryContext {\r\n    readonly _queryIdentifier: string;\r\n    readonly _queryObject: object;\r\n    readonly _repo: Repo;\r\n    readonly _path: Path;\r\n    readonly _queryParams: QueryParams;\r\n}\r\n/**\r\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\r\n * to be notified of that type of event.\r\n *\r\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\r\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\r\n * together, as a single EventRegistration.  Though currently we don't do that.\r\n */\r\nexport interface EventRegistration {\r\n    /**\r\n     * True if this container has a callback to trigger for this event type\r\n     */\r\n    respondsTo(eventType: string): boolean;\r\n    createEvent(change: Change, query: QueryContext): Event;\r\n    /**\r\n     * Given event data, return a function to trigger the user's callback\r\n     */\r\n    getEventRunner(eventData: Event): () => void;\r\n    createCancelEvent(error: Error, path: Path): CancelEvent | null;\r\n    matches(other: EventRegistration): boolean;\r\n    /**\r\n     * False basically means this is a \"dummy\" callback container being used as a sentinel\r\n     * to remove all callback containers of a particular type.  (e.g. if the user does\r\n     * ref.off('value') without specifying a specific callback).\r\n     *\r\n     * (TODO: Rework this, since it's hacky)\r\n     *\r\n     */\r\n    hasAnyCallback(): boolean;\r\n}\r\n"}}
