{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { pathContains, pathEquals } from '../util/Path';\r\nimport { exceptionGuard, log, logger } from '../util/util';\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    return EventQueue;\r\n}());\r\nexport { EventQueue };\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nexport function eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    var currList = null;\r\n    for (var i = 0; i < eventDataList.length; i++) {\r\n        var data = eventDataList[i];\r\n        var path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path: path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nexport function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\r\n        return pathEquals(eventPath, path);\r\n    });\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nexport function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\r\n        return pathContains(eventPath, changedPath) ||\r\n            pathContains(changedPath, eventPath);\r\n    });\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    var sentAll = true;\r\n    for (var i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        var eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            var eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (var i = 0; i < eventList.events.length; i++) {\r\n        var eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            var eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=EventQueue.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/Event.ts"],"map":"{\"version\":3,\"file\":\"EventQueue.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/view/EventQueue.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/view/EventQueue.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Path } from '../util/Path';\r\nimport { Event } from './Event';\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nexport declare class EventQueue {\r\n    eventLists_: EventList[];\r\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\r\n    recursionDepth_: number;\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nexport declare function eventQueueQueueEvents(eventQueue: EventQueue, eventDataList: Event[]): void;\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nexport declare function eventQueueRaiseEventsAtPath(eventQueue: EventQueue, path: Path, eventDataList: Event[]): void;\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nexport declare function eventQueueRaiseEventsForChangedPath(eventQueue: EventQueue, changedPath: Path, eventDataList: Event[]): void;\r\ninterface EventList {\r\n    events: Event[];\r\n    path: Path;\r\n}\r\nexport {};\r\n"}}
