{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __read, __spreadArray } from \"tslib\";\r\nimport { assert, contains, isEmpty, map, safeGet, stringify } from '@firebase/util';\r\nimport { PersistentConnection } from './PersistentConnection';\r\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\r\nimport { ChildrenNode } from './snap/ChildrenNode';\r\nimport { nodeFromJSON } from './snap/nodeFromJSON';\r\nimport { SnapshotHolder } from './SnapshotHolder';\r\nimport { newSparseSnapshotTree, sparseSnapshotTreeForEachTree, sparseSnapshotTreeForget, sparseSnapshotTreeRemember } from './SparseSnapshotTree';\r\nimport { StatsListener } from './stats/StatsListener';\r\nimport { statsManagerGetCollection, statsManagerGetOrCreateReporter } from './stats/StatsManager';\r\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\r\nimport { SyncTree, syncTreeAckUserWrite, syncTreeAddEventRegistration, syncTreeApplyServerMerge, syncTreeApplyServerOverwrite, syncTreeApplyTaggedQueryMerge, syncTreeApplyTaggedQueryOverwrite, syncTreeApplyUserMerge, syncTreeApplyUserOverwrite, syncTreeCalcCompleteEventCache, syncTreeGetServerValue, syncTreeRemoveEventRegistration, syncTreeTagForQuery } from './SyncTree';\r\nimport { newEmptyPath, newRelativePath, Path, pathChild, pathGetFront, pathPopFront } from './util/Path';\r\nimport { generateWithValues, resolveDeferredValueSnapshot, resolveDeferredValueTree } from './util/ServerValues';\r\nimport { Tree, treeForEachAncestor, treeForEachChild, treeForEachDescendant, treeGetPath, treeGetValue, treeHasChildren, treeSetValue, treeSubTree } from './util/Tree';\r\nimport { beingCrawled, each, exceptionGuard, log, LUIDGenerator, warn } from './util/util';\r\nimport { isValidPriority, validateFirebaseData } from './util/validation';\r\nimport { EventQueue, eventQueueQueueEvents, eventQueueRaiseEventsAtPath, eventQueueRaiseEventsForChangedPath } from './view/EventQueue';\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nvar MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    function Repo(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    return Repo;\r\n}());\r\nexport { Repo };\r\nexport function repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function (pathString, data, isMerge, tag) {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(function () { return repoOnConnectStatus(repo, /* connectStatus= */ true); }, 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, function (pathString, data, isMerge, tag) {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, function (connectStatus) {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, function (updates) {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(function (token) {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(function (result) {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function () { return new StatsReporter(repo.stats_, repo.server_); });\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: function (query, tag, currentHashFn, onComplete) {\r\n            var infoEvents = [];\r\n            var node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(function () {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: function () { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: function (query, tag, currentHashFn, onComplete) {\r\n            repo.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                var events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: function (query, tag) {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nexport function repoServerTime(repo) {\r\n    var offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    var offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nexport function repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    var path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    var events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            var taggedChildren = map(data, function (raw) { return nodeFromJSON(raw); });\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            var taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        var changedChildren = map(data, function (raw) { return nodeFromJSON(raw); });\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        var snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    var affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\n// TODO: This should be @private but it's used by test_access.js and internal.js\r\nexport function repoInterceptServerData(repo, callback) {\r\n    repo.interceptServerDataCallback_ = callback;\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, function (key, value) {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    var path = new Path('/.info/' + pathString);\r\n    var newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nexport function repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    var cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(function (payload) {\r\n        var node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        var events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            var tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, function (err) {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nexport function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    var serverValues = repoGenerateServerValues(repo);\r\n    var newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    var writeId = repoGetNextWriteId(repo);\r\n    var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n        var success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    var affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nexport function repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    var empty = true;\r\n    var serverValues = repoGenerateServerValues(repo);\r\n    var changedChildren = {};\r\n    each(childrenToMerge, function (changedKey, changedValue) {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        var writeId_1 = repoGetNextWriteId(repo);\r\n        var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId_1);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId_1, !success);\r\n            var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, function (changedPath) {\r\n            var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    var serverValues = repoGenerateServerValues(repo);\r\n    var resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function (path, node) {\r\n        var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    var events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function (path, snap) {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        var affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nexport function repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nexport function repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    var newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nexport function repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    var newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nexport function repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, function (childName, childNode) {\r\n                var newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nexport function repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    var events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nexport function repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    var events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nexport function repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nexport function repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nexport function repoStats(repo, showDelta) {\r\n    if (showDelta === void 0) { showDelta = false; }\r\n    if (typeof console === 'undefined') {\r\n        return;\r\n    }\r\n    var stats;\r\n    if (showDelta) {\r\n        if (!repo.statsListener_) {\r\n            repo.statsListener_ = new StatsListener(repo.stats_);\r\n        }\r\n        stats = repo.statsListener_.get();\r\n    }\r\n    else {\r\n        stats = repo.stats_.get();\r\n    }\r\n    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n        return Math.max(currentValue.length, previousValue);\r\n    }, 0);\r\n    each(stats, function (stat, value) {\r\n        var paddedStat = stat;\r\n        // pad stat names to be the same length (plus 2 extra spaces).\r\n        for (var i = stat.length; i < longestName + 2; i++) {\r\n            paddedStat += ' ';\r\n        }\r\n        console.log(paddedStat + value);\r\n    });\r\n}\r\nexport function repoStatsIncrementCounter(repo, metric) {\r\n    repo.stats_.incrementCounter(metric);\r\n    statsReporterIncludeStat(repo.statsReporter_, metric);\r\n}\r\nfunction repoLog(repo) {\r\n    var varArgs = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        varArgs[_i - 1] = arguments[_i];\r\n    }\r\n    var prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log.apply(void 0, __spreadArray([prefix], __read(varArgs), false));\r\n}\r\nexport function repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(function () {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                var code = (status || 'error').toUpperCase();\r\n                var message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                var error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nexport function repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        var queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        var nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        var serverValues = repoGenerateServerValues(repo);\r\n        var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node) {\r\n    if (node === void 0) { node = repo.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        var queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === 0 /* TransactionStatus.RUN */; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, function (childNode) {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        var relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            var callbacks = [];\r\n            var _loop_1 = function (i) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(function () {\r\n                        return queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved);\r\n                    });\r\n                }\r\n                queue[i].unwatcher();\r\n            };\r\n            for (var i = 0; i < queue.length; i++) {\r\n                _loop_1(i);\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    var path = treeGetPath(rootMostTransactionNode);\r\n    var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    var _loop_2 = function (i) {\r\n        var transaction = queue[i];\r\n        var relativePath = newRelativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = repoGenerateServerValues(repo);\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(function () {\r\n                        return queue[i].onComplete(null, false, queue[i].currentInputSnapshot);\r\n                    });\r\n                }\r\n                else {\r\n                    callbacks.push(function () {\r\n                        return queue[i].onComplete(new Error(abortReason), false, null);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    for (var i = 0; i < queue.length; i++) {\r\n        _loop_2(i);\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    var transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) { return a.order - b.order; });\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    var nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, function (child) {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    var queue = treeGetValue(node);\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, function (childNode) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    var transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, function (node) {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, function (node) {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    var queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Repo.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/api/Reference_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/AppCheckTokenProvider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/AuthTokenProvider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/PersistentConnection.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/ReadonlyRestClient.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/RepoInfo.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/ServerActions.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/ChildrenNode.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/Node.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/nodeFromJSON.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/SnapshotHolder.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/SparseSnapshotTree.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/stats/StatsCollection.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/stats/StatsListener.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/stats/StatsManager.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/stats/StatsReporter.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/SyncTree.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/misc.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/ServerValues.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Tree.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/validation.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/Event.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/EventQueue.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/EventRegistration.ts"],"map":"{\"version\":3,\"file\":\"Repo.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/core/Repo.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/Repo.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { ValueEventRegistration } from '../api/Reference_impl';\r\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\r\nimport { AuthTokenProvider } from './AuthTokenProvider';\r\nimport { PersistentConnection } from './PersistentConnection';\r\nimport { RepoInfo } from './RepoInfo';\r\nimport { ServerActions } from './ServerActions';\r\nimport { Node } from './snap/Node';\r\nimport { SnapshotHolder } from './SnapshotHolder';\r\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\r\nimport { StatsCollection } from './stats/StatsCollection';\r\nimport { StatsListener } from './stats/StatsListener';\r\nimport { StatsReporter } from './stats/StatsReporter';\r\nimport { SyncTree } from './SyncTree';\r\nimport { Indexable } from './util/misc';\r\nimport { Path } from './util/Path';\r\nimport { Tree } from './util/Tree';\r\nimport { EventQueue } from './view/EventQueue';\r\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\r\ndeclare const enum TransactionStatus {\r\n    RUN = 0,\r\n    SENT = 1,\r\n    COMPLETED = 2,\r\n    SENT_NEEDS_ABORT = 3,\r\n    NEEDS_ABORT = 4\r\n}\r\ninterface Transaction {\r\n    path: Path;\r\n    update: (a: unknown) => unknown;\r\n    onComplete: (error: Error | null, committed: boolean, node: Node | null) => void;\r\n    status: TransactionStatus;\r\n    order: number;\r\n    applyLocally: boolean;\r\n    retryCount: number;\r\n    unwatcher: () => void;\r\n    abortReason: string | null;\r\n    currentWriteId: number;\r\n    currentInputSnapshot: Node | null;\r\n    currentOutputSnapshotRaw: Node | null;\r\n    currentOutputSnapshotResolved: Node | null;\r\n}\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nexport declare class Repo {\r\n    repoInfo_: RepoInfo;\r\n    forceRestClient_: boolean;\r\n    authTokenProvider_: AuthTokenProvider;\r\n    appCheckProvider_: AppCheckTokenProvider;\r\n    /** Key for uniquely identifying this repo, used in RepoManager */\r\n    readonly key: string;\r\n    dataUpdateCount: number;\r\n    infoSyncTree_: SyncTree;\r\n    serverSyncTree_: SyncTree;\r\n    stats_: StatsCollection;\r\n    statsListener_: StatsListener | null;\r\n    eventQueue_: EventQueue;\r\n    nextWriteId_: number;\r\n    server_: ServerActions;\r\n    statsReporter_: StatsReporter;\r\n    infoData_: SnapshotHolder;\r\n    interceptServerDataCallback_: ((a: string, b: unknown) => void) | null;\r\n    /** A list of data pieces and paths to be set when this client disconnects. */\r\n    onDisconnect_: SparseSnapshotTree;\r\n    /** Stores queues of outstanding transactions for Firebase locations. */\r\n    transactionQueueTree_: Tree<Transaction[]>;\r\n    persistentConnection_: PersistentConnection | null;\r\n    constructor(repoInfo_: RepoInfo, forceRestClient_: boolean, authTokenProvider_: AuthTokenProvider, appCheckProvider_: AppCheckTokenProvider);\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString(): string;\r\n}\r\nexport declare function repoStart(repo: Repo, appId: string, authOverride?: object): void;\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nexport declare function repoServerTime(repo: Repo): number;\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nexport declare function repoGenerateServerValues(repo: Repo): Indexable;\r\nexport declare function repoInterceptServerData(repo: Repo, callback: ((a: string, b: unknown) => unknown) | null): void;\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nexport declare function repoGetValue(repo: Repo, query: QueryContext, eventRegistration: ValueEventRegistration): Promise<Node>;\r\nexport declare function repoSetWithPriority(repo: Repo, path: Path, newVal: unknown, newPriority: number | string | null, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;\r\nexport declare function repoUpdate(repo: Repo, path: Path, childrenToMerge: {\r\n    [k: string]: unknown;\r\n}, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;\r\nexport declare function repoOnDisconnectCancel(repo: Repo, path: Path, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;\r\nexport declare function repoOnDisconnectSet(repo: Repo, path: Path, value: unknown, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;\r\nexport declare function repoOnDisconnectSetWithPriority(repo: Repo, path: Path, value: unknown, priority: unknown, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;\r\nexport declare function repoOnDisconnectUpdate(repo: Repo, path: Path, childrenToMerge: {\r\n    [k: string]: unknown;\r\n}, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;\r\nexport declare function repoAddEventCallbackForQuery(repo: Repo, query: QueryContext, eventRegistration: EventRegistration): void;\r\nexport declare function repoRemoveEventCallbackForQuery(repo: Repo, query: QueryContext, eventRegistration: EventRegistration): void;\r\nexport declare function repoInterrupt(repo: Repo): void;\r\nexport declare function repoResume(repo: Repo): void;\r\nexport declare function repoStats(repo: Repo, showDelta?: boolean): void;\r\nexport declare function repoStatsIncrementCounter(repo: Repo, metric: string): void;\r\nexport declare function repoCallOnCompleteCallback(repo: Repo, callback: ((status: Error | null, errorReason?: string) => void) | null, status: string, errorReason?: string | null): void;\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nexport declare function repoStartTransaction(repo: Repo, path: Path, transactionUpdate: (a: unknown) => unknown, onComplete: ((error: Error, committed: boolean, node: Node) => void) | null, unwatcher: () => void, applyLocally: boolean): void;\r\nexport {};\r\n"}}
