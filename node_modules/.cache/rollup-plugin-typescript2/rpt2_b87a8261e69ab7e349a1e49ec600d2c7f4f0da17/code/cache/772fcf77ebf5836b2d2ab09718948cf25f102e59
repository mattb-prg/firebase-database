{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { assert, jsonEval, safeGet, querystring, Deferred } from '@firebase/util';\r\nimport { ServerActions } from './ServerActions';\r\nimport { logWrapper, warn } from './util/util';\r\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nexport class ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=ReadonlyRestClient.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/AppCheckTokenProvider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/AuthTokenProvider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/RepoInfo.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/ServerActions.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/EventRegistration.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/QueryParams.ts"],"map":"{\"version\":3,\"file\":\"ReadonlyRestClient.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/core/ReadonlyRestClient.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/ReadonlyRestClient.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\r\nimport { AuthTokenProvider } from './AuthTokenProvider';\r\nimport { RepoInfo } from './RepoInfo';\r\nimport { ServerActions } from './ServerActions';\r\nimport { QueryContext } from './view/EventRegistration';\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nexport declare class ReadonlyRestClient extends ServerActions {\r\n    private repoInfo_;\r\n    private onDataUpdate_;\r\n    private authTokenProvider_;\r\n    private appCheckTokenProvider_;\r\n    reportStats(stats: {\r\n        [k: string]: unknown;\r\n    }): void;\r\n    /** @private {function(...[*])} */\r\n    private log_;\r\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\r\n    private listens_;\r\n    static getListenId_(query: QueryContext, tag?: number | null): string;\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_: RepoInfo, onDataUpdate_: (a: string, b: unknown, c: boolean, d: number | null) => void, authTokenProvider_: AuthTokenProvider, appCheckTokenProvider_: AppCheckTokenProvider);\r\n    /** @inheritDoc */\r\n    listen(query: QueryContext, currentHashFn: () => string, tag: number | null, onComplete: (a: string, b: unknown) => void): void;\r\n    /** @inheritDoc */\r\n    unlisten(query: QueryContext, tag: number | null): void;\r\n    get(query: QueryContext): Promise<string>;\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token: string): void;\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    private restRequest_;\r\n}\r\n"}}
