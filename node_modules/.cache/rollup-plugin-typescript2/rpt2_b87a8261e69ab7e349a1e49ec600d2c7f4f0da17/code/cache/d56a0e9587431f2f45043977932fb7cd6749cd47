{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nexport class ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\r\n//# sourceMappingURL=ServerActions.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/view/EventRegistration.ts"],"map":"{\"version\":3,\"file\":\"ServerActions.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/core/ServerActions.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAIH;;;;;GAKG;AACH,MAAM,OAAgB,aAAa;IAkBjC,GAAG,CACD,UAAkB,EAClB,IAAa,EACb,UAA2C,EAC3C,IAAa,IACZ,CAAC;IAEJ,KAAK,CACH,UAAkB,EAClB,IAAa,EACb,UAAiD,EACjD,IAAa,IACZ,CAAC;IAEJ;;;OAGG;IACH,gBAAgB,CAAC,KAAa,IAAG,CAAC;IAElC;;;OAGG;IACH,oBAAoB,CAAC,KAAa,IAAG,CAAC;IAEtC,eAAe,CACb,UAAkB,EAClB,IAAa,EACb,UAA2C,IAC1C,CAAC;IAEJ,iBAAiB,CACf,UAAkB,EAClB,IAAa,EACb,UAA2C,IAC1C,CAAC;IAEJ,kBAAkB,CAChB,UAAkB,EAClB,UAA2C,IAC1C,CAAC;IAEJ,WAAW,CAAC,KAA+B,IAAG,CAAC;CAChD\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/ServerActions.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { QueryContext } from './view/EventRegistration';\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nexport declare abstract class ServerActions {\r\n    abstract listen(query: QueryContext, currentHashFn: () => string, tag: number | null, onComplete: (a: string, b: unknown) => void): void;\r\n    /**\r\n     * Remove a listen.\r\n     */\r\n    abstract unlisten(query: QueryContext, tag: number | null): void;\r\n    /**\r\n     * Get the server value satisfying this query.\r\n     */\r\n    abstract get(query: QueryContext): Promise<string>;\r\n    put(pathString: string, data: unknown, onComplete?: (a: string, b: string) => void, hash?: string): void;\r\n    merge(pathString: string, data: unknown, onComplete: (a: string, b: string | null) => void, hash?: string): void;\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token: string): void;\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token: string): void;\r\n    onDisconnectPut(pathString: string, data: unknown, onComplete?: (a: string, b: string) => void): void;\r\n    onDisconnectMerge(pathString: string, data: unknown, onComplete?: (a: string, b: string) => void): void;\r\n    onDisconnectCancel(pathString: string, onComplete?: (a: string, b: string) => void): void;\r\n    reportStats(stats: {\r\n        [k: string]: unknown;\r\n    }): void;\r\n}\r\n"}}
