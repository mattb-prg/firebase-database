{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { contains, errorPrefix as errorPrefixFxn, safeGet, stringLength } from '@firebase/util';\r\nimport { Path, pathChild, pathCompare, pathContains, pathGetBack, pathGetFront, pathSlice, ValidationPath, validationPathPop, validationPathPush, validationPathToErrorString } from './Path';\r\nimport { each, isInvalidJSONNumber } from './util';\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nexport const isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nexport const isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nexport const isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nexport const isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nexport const validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nexport const validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nexport const validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nexport const validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix = errorPrefixFxn(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nexport const validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefixFxn(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefixFxn(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nexport const validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefixFxn(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport const validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefixFxn(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nexport const validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport const validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nexport const validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefixFxn(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nexport const validateString = function (fnName, argumentName, string, optional) {\r\n    if (optional && string === undefined) {\r\n        return;\r\n    }\r\n    if (!(typeof string === 'string')) {\r\n        throw new Error(errorPrefixFxn(fnName, argumentName) + 'must be a valid string.');\r\n    }\r\n};\r\nexport const validateObject = function (fnName, argumentName, obj, optional) {\r\n    if (optional && obj === undefined) {\r\n        return;\r\n    }\r\n    if (!(obj && typeof obj === 'object') || obj === null) {\r\n        throw new Error(errorPrefixFxn(fnName, argumentName) + 'must be a valid object.');\r\n    }\r\n};\r\nexport const validateObjectContainsKey = function (fnName, argumentName, obj, key, optional, optType) {\r\n    const objectContainsKey = \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    obj && typeof obj === 'object' && contains(obj, key);\r\n    if (!objectContainsKey) {\r\n        if (optional) {\r\n            return;\r\n        }\r\n        else {\r\n            throw new Error(errorPrefixFxn(fnName, argumentName) +\r\n                'must contain the key \"' +\r\n                key +\r\n                '\"');\r\n        }\r\n    }\r\n    if (optType) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const val = safeGet(obj, key);\r\n        if ((optType === 'number' && !(typeof val === 'number')) ||\r\n            (optType === 'string' && !(typeof val === 'string')) ||\r\n            (optType === 'boolean' && !(typeof val === 'boolean')) ||\r\n            (optType === 'function' && !(typeof val === 'function')) ||\r\n            (optType === 'object' && !(typeof val === 'object') && val)) {\r\n            if (optional) {\r\n                throw new Error(errorPrefixFxn(fnName, argumentName) +\r\n                    'contains invalid value for key \"' +\r\n                    key +\r\n                    '\" (must be of type \"' +\r\n                    optType +\r\n                    '\")');\r\n            }\r\n            else {\r\n                throw new Error(errorPrefixFxn(fnName, argumentName) +\r\n                    'must contain the key \"' +\r\n                    key +\r\n                    '\" with type \"' +\r\n                    optType +\r\n                    '\"');\r\n            }\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=validation.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/RepoInfo.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts"],"map":"{\"version\":3,\"file\":\"validation.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/util/validation.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/util/validation.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { RepoInfo } from '../RepoInfo';\r\nimport { Path, ValidationPath } from './Path';\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nexport declare const INVALID_KEY_REGEX_: RegExp;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nexport declare const INVALID_PATH_REGEX_: RegExp;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nexport declare const MAX_LEAF_SIZE_: number;\r\nexport declare const isValidKey: (key: unknown) => boolean;\r\nexport declare const isValidPathString: (pathString: string) => boolean;\r\nexport declare const isValidRootPathString: (pathString: string) => boolean;\r\nexport declare const isValidPriority: (priority: unknown) => boolean;\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nexport declare const validateFirebaseDataArg: (fnName: string, value: unknown, path: Path, optional: boolean) => void;\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nexport declare const validateFirebaseData: (errorPrefix: string, data: unknown, path_: Path | ValidationPath) => void;\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nexport declare const validateFirebaseMergePaths: (errorPrefix: string, mergePaths: Path[]) => void;\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nexport declare const validateFirebaseMergeDataArg: (fnName: string, data: unknown, path: Path, optional: boolean) => void;\r\nexport declare const validatePriority: (fnName: string, priority: unknown, optional: boolean) => void;\r\nexport declare const validateKey: (fnName: string, argumentName: string, key: string, optional: boolean) => void;\r\n/**\r\n * @internal\r\n */\r\nexport declare const validatePathString: (fnName: string, argumentName: string, pathString: string, optional: boolean) => void;\r\nexport declare const validateRootPathString: (fnName: string, argumentName: string, pathString: string, optional: boolean) => void;\r\n/**\r\n * @internal\r\n */\r\nexport declare const validateWritablePath: (fnName: string, path: Path) => void;\r\nexport declare const validateUrl: (fnName: string, parsedUrl: {\r\n    repoInfo: RepoInfo;\r\n    path: Path;\r\n}) => void;\r\nexport declare const validateString: (fnName: string, argumentName: string, string: unknown, optional: boolean) => void;\r\nexport declare const validateObject: (fnName: string, argumentName: string, obj: unknown, optional: boolean) => void;\r\nexport declare const validateObjectContainsKey: (fnName: string, argumentName: string, obj: unknown, key: string, optional: boolean, optType?: string) => void;\r\n"}}
