{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { assert } from '@firebase/util';\r\nimport { newEmptyPath, Path, pathGetFront, pathIsEmpty, pathPopFront } from '../util/Path';\r\nimport { OperationType } from './Operation';\r\nimport { Overwrite } from './Overwrite';\r\nexport class Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\r\n//# sourceMappingURL=Merge.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/snap/Node.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/ImmutableTree.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/Path.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/operation/Operation.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/operation/Overwrite.ts"],"map":"{\"version\":3,\"file\":\"Merge.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/operation/Merge.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAIxC,OAAO,EACL,YAAY,EACZ,IAAI,EACJ,YAAY,EACZ,WAAW,EACX,YAAY,EACb,MAAM,cAAc,CAAC;AAEtB,OAAO,EAA8B,aAAa,EAAE,MAAM,aAAa,CAAC;AACxE,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,OAAO,KAAK;IAIhB;IACE,kBAAkB,CAAQ,MAAuB;IACjD,kBAAkB,CAAQ,IAAU;IACpC,kBAAkB,CAAQ,QAA6B;QAF7B,WAAM,GAAN,MAAM,CAAiB;QACvB,SAAI,GAAJ,IAAI,CAAM;QACV,aAAQ,GAAR,QAAQ,CAAqB;QANzD,kBAAkB;QAClB,SAAI,GAAG,aAAa,CAAC,KAAK,CAAC;IAMxB,CAAC;IACJ,iBAAiB,CAAC,SAAiB;QACjC,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC1B,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC7D,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE;gBACvB,2BAA2B;gBAC3B,OAAO,IAAI,CAAC;aACb;iBAAM,IAAI,SAAS,CAAC,KAAK,EAAE;gBAC1B,yFAAyF;gBACzF,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;aACpE;iBAAM;gBACL,oCAAoC;gBACpC,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE,SAAS,CAAC,CAAC;aAC1D;SACF;aAAM;YACL,MAAM,CACJ,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,SAAS,EACrC,gEAAgE,CACjE,CAAC;YACF,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACvE;IACH,CAAC;IACD,QAAQ;QACN,OAAO,CACL,YAAY;YACZ,IAAI,CAAC,IAAI;YACT,IAAI;YACJ,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACtB,UAAU;YACV,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,GAAG,CACJ,CAAC;IACJ,CAAC;CACF\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/operation/Merge.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Node } from '../snap/Node';\r\nimport { ImmutableTree } from '../util/ImmutableTree';\r\nimport { Path } from '../util/Path';\r\nimport { Operation, OperationSource, OperationType } from './Operation';\r\nexport declare class Merge implements Operation {\r\n    /** @inheritDoc */ source: OperationSource;\r\n    /** @inheritDoc */ path: Path;\r\n    /** @inheritDoc */ children: ImmutableTree<Node>;\r\n    /** @inheritDoc */\r\n    type: OperationType;\r\n    constructor(\r\n    /** @inheritDoc */ source: OperationSource, \r\n    /** @inheritDoc */ path: Path, \r\n    /** @inheritDoc */ children: ImmutableTree<Node>);\r\n    operationForChild(childName: string): Operation;\r\n    toString(): string;\r\n}\r\n"}}
