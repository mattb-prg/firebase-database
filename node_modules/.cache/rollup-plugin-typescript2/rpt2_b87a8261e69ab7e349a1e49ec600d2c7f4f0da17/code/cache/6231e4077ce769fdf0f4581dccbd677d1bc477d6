{"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { log, warn } from './util/util';\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nexport class FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nexport class EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\r\n//# sourceMappingURL=AuthTokenProvider.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/app-types/private.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth-interop-types/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/component/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/src/core/util/util.ts"],"map":"{\"version\":3,\"file\":\"AuthTokenProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/core/AuthTokenProvider.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AASH,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AASxC;;GAEG;AACH,MAAM,OAAO,yBAAyB;IAGpC,YACU,QAAgB,EAChB,gBAAwB,EACxB,aAAiD;QAFjD,aAAQ,GAAR,QAAQ,CAAQ;QAChB,qBAAgB,GAAhB,gBAAgB,CAAQ;QACxB,kBAAa,GAAb,aAAa,CAAoC;QALnD,UAAK,GAAgC,IAAI,CAAC;QAOhD,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,YAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;SACnD;IACH,CAAC;IAED,QAAQ,CAAC,YAAqB;QAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,IAAI,OAAO,CAAwB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC5D,kEAAkE;gBAClE,oEAAoE;gBACpE,kEAAkE;gBAClE,uDAAuD;gBACvD,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,IAAI,CAAC,KAAK,EAAE;wBACd,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;qBACnD;yBAAM;wBACL,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf;gBACH,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACrD,oEAAoE;YACpE,oBAAoB;YACpB,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,4BAA4B,EAAE;gBACxD,GAAG,CAAC,gEAAgE,CAAC,CAAC;gBACtE,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC9B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,QAAwC;QAC7D,uEAAuE;QACvE,0EAA0E;QAC1E,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;SAC3C;aAAM;YACL,IAAI,CAAC,aAAa;iBACf,GAAG,EAAE;iBACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtD;IACH,CAAC;IAED,yBAAyB,CAAC,QAAwC;QAChE,IAAI,CAAC,aAAa;aACf,GAAG,EAAE;aACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,qBAAqB;QACnB,IAAI,YAAY,GACd,yDAAyD;YACzD,IAAI,CAAC,QAAQ;YACb,yDAAyD;YACzD,yBAAyB,CAAC;QAC5B,IAAI,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzC,YAAY;gBACV,kEAAkE;oBAClE,8EAA8E;oBAC9E,UAAU,CAAC;SACd;aAAM,IAAI,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACpD,YAAY;gBACV,sEAAsE;oBACtE,8EAA8E;oBAC9E,UAAU,CAAC;SACd;aAAM;YACL,YAAY;gBACV,kEAAkE;oBAClE,4DAA4D;oBAC5D,uCAAuC,CAAC;SAC3C;QACD,IAAI,CAAC,YAAY,CAAC,CAAC;IACrB,CAAC;CACF;AAED,0GAA0G;AAC1G,MAAM,OAAO,qBAAqB;IAIhC,YAAoB,WAAmB;QAAnB,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAE3C,QAAQ,CAAC,YAAqB;QAC5B,OAAO,OAAO,CAAC,OAAO,CAAC;YACrB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,QAAwC;QAC7D,yEAAyE;QACzE,wCAAwC;QACxC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED,yBAAyB,CAAC,QAAwC,IAAS,CAAC;IAE5E,qBAAqB,KAAU,CAAC;;AAnBhC,iGAAiG;AAC1F,2BAAK,GAAG,OAAO,CAAC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/database/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/AuthTokenProvider.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\r\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\r\nimport { Provider } from '@firebase/component';\r\nexport interface AuthTokenProvider {\r\n    getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\r\n    addTokenChangeListener(listener: (token: string | null) => void): void;\r\n    removeTokenChangeListener(listener: (token: string | null) => void): void;\r\n    notifyForInvalidToken(): void;\r\n}\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nexport declare class FirebaseAuthTokenProvider implements AuthTokenProvider {\r\n    private appName_;\r\n    private firebaseOptions_;\r\n    private authProvider_;\r\n    private auth_;\r\n    constructor(appName_: string, firebaseOptions_: object, authProvider_: Provider<FirebaseAuthInternalName>);\r\n    getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\r\n    addTokenChangeListener(listener: (token: string | null) => void): void;\r\n    removeTokenChangeListener(listener: (token: string | null) => void): void;\r\n    notifyForInvalidToken(): void;\r\n}\r\nexport declare class EmulatorTokenProvider implements AuthTokenProvider {\r\n    private accessToken;\r\n    /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\n    static OWNER: string;\r\n    constructor(accessToken: string);\r\n    getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\r\n    addTokenChangeListener(listener: (token: string | null) => void): void;\r\n    removeTokenChangeListener(listener: (token: string | null) => void): void;\r\n    notifyForInvalidToken(): void;\r\n}\r\n"}}
