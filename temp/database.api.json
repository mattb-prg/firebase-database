{
  "metadata": {
    "toolPackage": "api-extractor-me",
    "toolVersion": "0.1.2",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@firebase/database!",
  "docComment": "/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n",
  "name": "@firebase/database",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@firebase/database!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!child:function(1)",
          "docComment": "/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n *\n * @param path - A relative path from this location to the desired child location.\n *\n * @returns The specified child location.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function child(parent: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "parent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "child"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!connectDatabaseEmulator:function(1)",
          "docComment": "/**\n * Modify the provided instance to communicate with the Realtime Database emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n *\n * @param host - The emulator host (ex: localhost)\n *\n * @param port - The emulator port (ex: 8080)\n *\n * @param  - options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function connectDatabaseEmulator(db: "
            },
            {
              "kind": "Reference",
              "text": "Database",
              "canonicalReference": "@firebase/database!Database:class"
            },
            {
              "kind": "Content",
              "text": ", host: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", port: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    mockUserToken?: "
            },
            {
              "kind": "Reference",
              "text": "EmulatorMockTokenOptions",
              "canonicalReference": "@firebase/util!EmulatorMockTokenOptions:type"
            },
            {
              "kind": "Content",
              "text": " | string;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "db",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "host",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "port",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            }
          ],
          "name": "connectDatabaseEmulator"
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/database!Database:class",
          "docComment": "/**\n * Class representing a Firebase Realtime Database.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Database "
            }
          ],
          "releaseTag": "Public",
          "name": "Database",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!Database#app:member",
              "docComment": "/**\n * The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly app: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseApp",
                  "canonicalReference": "@firebase/app!FirebaseApp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "app",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!Database#type:member",
              "docComment": "/**\n * Represents a `Database` instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly 'type' = \"database\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/database!DatabaseReference:interface",
          "docComment": "/**\n * A `DatabaseReference` represents a specific location in your Database and can be used for reading or writing data to that Database location.\n *\n * You can reference the root or child location in your Database by calling `ref()` or `ref(\"child/path\")`.\n *\n * Writing is done with the `set()` method and reading can be done with the `on*()` method. See {@link https://firebase.google.com/docs/database/web/read-and-write}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface DatabaseReference extends "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DatabaseReference",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/database!DatabaseReference#key:member",
              "docComment": "/**\n * The last part of the `DatabaseReference`'s path.\n *\n * For example, `\"ada\"` is the key for `https://<DATABASE_NAME>.firebaseio.com/users/ada`.\n *\n * The key of a root `DatabaseReference` is `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly key: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/database!DatabaseReference#parent:member",
              "docComment": "/**\n * The parent location of a `DatabaseReference`.\n *\n * The parent of a root `DatabaseReference` is `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parent: "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseReference",
                  "canonicalReference": "@firebase/database!DatabaseReference:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/database!DatabaseReference#root:member",
              "docComment": "/**\n * The root `DatabaseReference` of the Database.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly root: "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseReference",
                  "canonicalReference": "@firebase/database!DatabaseReference:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/database!DataSnapshot:class",
          "docComment": "/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach with `on()` or `once()`. You can extract the contents of the snapshot as a JavaScript object by calling the `val()` method. Alternatively, you can traverse into the snapshot by calling `child()` to return child snapshots (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at a Database location. It cannot be modified and will never change (to modify data, you always call the `set()` method on a `Reference` directly).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DataSnapshot "
            }
          ],
          "releaseTag": "Public",
          "name": "DataSnapshot",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#child:member(1)",
              "docComment": "/**\n * Gets another `DataSnapshot` for the location at the specified relative path.\n *\n * Passing a relative path to the `child()` method of a DataSnapshot returns another `DataSnapshot` for the location at the specified relative path. The relative path can either be a simple child name (for example, \"ada\") or a deeper, slash-separated path (for example, \"ada/name/first\"). If the child location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot` whose value is `null`) is returned.\n *\n * @param path - A relative path to the location of child data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "child(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "DataSnapshot",
                  "canonicalReference": "@firebase/database!DataSnapshot:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "child"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#exists:member(1)",
              "docComment": "/**\n * Returns true if this `DataSnapshot` contains any data. It is slightly more efficient than using `snapshot.val() !== null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exists(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exists"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#exportVal:member(1)",
              "docComment": "/**\n * Exports the entire contents of the DataSnapshot as a JavaScript object.\n *\n * The `exportVal()` method is similar to `val()`, except priority information is included (if available), making it suitable for backing up your data.\n *\n * @returns The DataSnapshot's contents as a JavaScript value (Object, Array, string, number, boolean, or `null`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exportVal(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exportVal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#forEach:member(1)",
              "docComment": "/**\n * Enumerates the top-level children in the `IteratedDataSnapshot`.\n *\n * Because of the way JavaScript objects work, the ordering of data in the JavaScript object returned by `val()` is not guaranteed to match the ordering on the server nor the ordering of `onChildAdded()` events. That is where `forEach()` comes in handy. It guarantees the children of a `DataSnapshot` will be iterated in their query order.\n *\n * If no explicit `orderBy*()` method is used, results are returned ordered by key (unless priorities are used, in which case, results are returned by priority).\n *\n * @param action - A function that will be called for each child DataSnapshot. The callback can return true to cancel further enumeration.\n *\n * @returns true if enumeration was canceled due to your callback returning true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEach(action: "
                },
                {
                  "kind": "Content",
                  "text": "(child: "
                },
                {
                  "kind": "Reference",
                  "text": "IteratedDataSnapshot",
                  "canonicalReference": "@firebase/database!IteratedDataSnapshot:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean | void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "forEach"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#hasChild:member(1)",
              "docComment": "/**\n * Returns true if the specified child path has (non-null) data.\n *\n * @param path - A relative path to the location of a potential child.\n *\n * @returns `true` if data exists at the specified child path; else `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasChild(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasChild"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#hasChildren:member(1)",
              "docComment": "/**\n * Returns whether or not the `DataSnapshot` has any non-`null` child properties.\n *\n * You can use `hasChildren()` to determine if a `DataSnapshot` has any children. If it does, you can enumerate them using `forEach()`. If it doesn't, then either this snapshot contains a primitive value (which can be retrieved with `val()`) or it is empty (in which case, `val()` will return `null`).\n *\n * @returns true if this snapshot has any children; else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasChildren(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasChildren"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!DataSnapshot#key:member",
              "docComment": "/**\n * The key (last part of the path) of the location of this `DataSnapshot`.\n *\n * The last token in a Database location is considered its key. For example, \"ada\" is the key for the /users/ada/ node. Accessing the key on any `DataSnapshot` will return the key for the location that generated it. However, accessing the key on the root URL of a Database will return `null`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get key(): "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!DataSnapshot#priority:member",
              "docComment": "/**\n * Gets the priority value of the data in this `DataSnapshot`.\n *\n * Applications need not use priority but can order collections by ordinary properties (see {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data} ).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get priority(): "
                },
                {
                  "kind": "Content",
                  "text": "string | number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "priority",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!DataSnapshot#ref:member",
              "docComment": "/**\n * The location of this DataSnapshot.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ref: "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseReference",
                  "canonicalReference": "@firebase/database!DatabaseReference:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ref",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!DataSnapshot#size:member",
              "docComment": "/**\n * Returns the number of child properties of this `DataSnapshot`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get size(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "object | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!DataSnapshot#val:member(1)",
              "docComment": "/**\n * Extracts a JavaScript value from a `DataSnapshot`.\n *\n * Depending on the data in a `DataSnapshot`, the `val()` method may return a scalar type (string, number, or boolean), an array, or an object. It may also return null, indicating that the `DataSnapshot` is empty (contains no data).\n *\n * @returns The DataSnapshot's contents as a JavaScript value (Object, Array, string, number, boolean, or `null`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "val(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "val"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!enableLogging:function(1)",
          "docComment": "/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n *\n * @param persistent - Remembers the logging state between page refreshes if `true`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableLogging(enabled: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", persistent?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "enabled",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "persistent",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "enableLogging"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!enableLogging:function(2)",
          "docComment": "/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableLogging(logger: "
            },
            {
              "kind": "Content",
              "text": "(message: string) => unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "logger",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "enableLogging"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!endAt:function(1)",
          "docComment": "/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()` allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value will be included in the query. The optional key argument can be used to further limit the range of the query. If it is specified, then children that have exactly the specified value must also have a key name less than or equal to the specified key.\n *\n * You can read more about `endAt()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string.\n *\n * @param key - The child key to end at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function endAt(value: "
            },
            {
              "kind": "Content",
              "text": "number | string | boolean | null"
            },
            {
              "kind": "Content",
              "text": ", key?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "endAt"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!endBefore:function(1)",
          "docComment": "/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()` allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children with a value less than the specified value will be included in the query. If a key is specified, then children must have a value less than or equal to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string.\n *\n * @param key - The child key to end before, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function endBefore(value: "
            },
            {
              "kind": "Content",
              "text": "number | string | boolean | null"
            },
            {
              "kind": "Content",
              "text": ", key?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "endBefore"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!equalTo:function(1)",
          "docComment": "/**\n * Creates a `QueryConstraint` that includes children that match the specified value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()` allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the query. If it is specified, then children that have exactly the specified value must also have exactly the specified key as their key name. This can be used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string.\n *\n * @param key - The child key to start at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function equalTo(value: "
            },
            {
              "kind": "Content",
              "text": "number | string | boolean | null"
            },
            {
              "kind": "Content",
              "text": ", key?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "equalTo"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@firebase/database!EventType:type",
          "docComment": "/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\"\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EventType = "
            },
            {
              "kind": "Content",
              "text": "'value' | 'child_added' | 'child_changed' | 'child_moved' | 'child_removed'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EventType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!forceLongPolling:function(1)",
          "docComment": "/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function forceLongPolling(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "forceLongPolling"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!forceWebSockets:function(1)",
          "docComment": "/**\n * Force the use of websockets instead of longPolling.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function forceWebSockets(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "forceWebSockets"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!get:function(1)",
          "docComment": "/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n *\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is available, or rejects if the client is unable to return a value (e.g., if the server is unreachable and there is nothing cached).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function get(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "get"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!getDatabase:function(1)",
          "docComment": "/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with with default settings if no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime Database instance is associated with.\n *\n * @param url - The URL of the Realtime Database instance to connect to. If not provided, the SDK connects to the default instance of the Firebase App.\n *\n * @returns The `Database` instance of the provided app.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDatabase(app?: "
            },
            {
              "kind": "Reference",
              "text": "FirebaseApp",
              "canonicalReference": "@firebase/app!FirebaseApp:interface"
            },
            {
              "kind": "Content",
              "text": ", url?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Database",
              "canonicalReference": "@firebase/database!Database:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "app",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getDatabase"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!goOffline:function(1)",
          "docComment": "/**\n * Disconnects from the server (all Database operations will be completed offline).\n *\n * The client automatically maintains a persistent connection to the Database server, which will remain active indefinitely and reconnect when disconnected. However, the `goOffline()` and `goOnline()` methods may be used to control the client connection in cases where a persistent connection is undesirable.\n *\n * While offline, the client will no longer receive data updates from the Database. However, all Database operations performed locally will continue to immediately fire events, allowing your application to continue behaving normally. Additionally, each operation performed locally will automatically be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function goOffline(db: "
            },
            {
              "kind": "Reference",
              "text": "Database",
              "canonicalReference": "@firebase/database!Database:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "db",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "goOffline"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!goOnline:function(1)",
          "docComment": "/**\n * Reconnects to the server and synchronizes the offline Database state with the server state.\n *\n * This method should be used after disabling the active connection with `goOffline()`. Once reconnected, the client will transmit the proper data and fire the appropriate events so that your client \"catches up\" automatically.\n *\n * @param db - The instance to reconnect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function goOnline(db: "
            },
            {
              "kind": "Reference",
              "text": "Database",
              "canonicalReference": "@firebase/database!Database:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "db",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "goOnline"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!increment:function(1)",
          "docComment": "/**\n * Returns a placeholder value that can be used to atomically increment the current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n *\n * @returns A placeholder value for modifying data atomically server-side.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function increment(delta: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "delta",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "increment"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/database!IteratedDataSnapshot:interface",
          "docComment": "/**\n * Represents a child snapshot of a `Reference` that is being iterated over. The key will never be undefined.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface IteratedDataSnapshot extends "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IteratedDataSnapshot",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/database!IteratedDataSnapshot#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!limitToFirst:function(1)",
          "docComment": "/**\n * Creates a new `QueryConstraint` that if limited to the first specific number of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be synced for a given callback. If we set a limit of 100, we will initially only receive up to 100 `child_added` events. If we have fewer than 100 messages stored in our Database, a `child_added` event will fire for each message. However, if we have over 100 messages, we will only receive a `child_added` event for the first 100 ordered messages. As items change, we will receive `child_removed` events for each item that drops out of the active list so that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function limitToFirst(limit: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "limit",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "limitToFirst"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!limitToLast:function(1)",
          "docComment": "/**\n * Creates a new `QueryConstraint` that is limited to return only the last specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be synced for a given callback. If we set a limit of 100, we will initially only receive up to 100 `child_added` events. If we have fewer than 100 messages stored in our Database, a `child_added` event will fire for each message. However, if we have over 100 messages, we will only receive a `child_added` event for the last 100 ordered messages. As items change, we will receive `child_removed` events for each item that drops out of the active list so that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function limitToLast(limit: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "limit",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "limitToLast"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/database!ListenOptions:interface",
          "docComment": "/**\n * An options objects that can be used to customize a listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface ListenOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ListenOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/database!ListenOptions#onlyOnce:member",
              "docComment": "/**\n * Whether to remove the listener after its first invocation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly onlyOnce?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onlyOnce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!off:function(1)",
          "docComment": "/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener. Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener will not automatically remove listeners registered on child nodes, `off()` must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType will be removed. Similarly, if no eventType is specified, all callbacks for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe callbacks.\n *\n * @param query - The query that the listener was registered with.\n *\n * @param eventType - One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks for the `Reference` will be removed.\n *\n * @param callback - The callback function that was passed to `on()` or `undefined` to remove all callbacks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function off(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", eventType?: "
            },
            {
              "kind": "Reference",
              "text": "EventType",
              "canonicalReference": "@firebase/database!EventType:type"
            },
            {
              "kind": "Content",
              "text": ", callback?: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName?: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "eventType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            }
          ],
          "name": "off"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildAdded:function(1)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this location, and it will be triggered again every time a new child is added. The `DataSnapshot` passed into the callback will reflect the data for the relevant child. For ordering purposes, it is passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildAdded(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName?: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback?: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            }
          ],
          "name": "onChildAdded"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildAdded:function(2)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this location, and it will be triggered again every time a new child is added. The `DataSnapshot` passed into the callback will reflect the data for the relevant child. For ordering purposes, it is passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildAdded(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "onChildAdded"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildAdded:function(3)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this location, and it will be triggered again every time a new child is added. The `DataSnapshot` passed into the callback will reflect the data for the relevant child. For ordering purposes, it is passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildAdded(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "name": "onChildAdded"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildChanged:function(1)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child (or any of its descendants) changes. Note that a single `child_changed` event may represent multiple changes to the child. The `DataSnapshot` passed to the callback will contain the new child contents. For ordering purposes, the callback is also passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildChanged(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback?: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            }
          ],
          "name": "onChildChanged"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildChanged:function(2)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child (or any of its descendants) changes. Note that a single `child_changed` event may represent multiple changes to the child. The `DataSnapshot` passed to the callback will contain the new child contents. For ordering purposes, the callback is also passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildChanged(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "onChildChanged"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildChanged:function(3)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child (or any of its descendants) changes. Note that a single `child_changed` event may represent multiple changes to the child. The `DataSnapshot` passed to the callback will contain the new child contents. For ordering purposes, the callback is also passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildChanged(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "name": "onChildChanged"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildMoved:function(1)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes such that its position relative to its siblings changes. The `DataSnapshot` passed to the callback will be for the data of the child that has moved. It is also passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildMoved(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback?: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            }
          ],
          "name": "onChildMoved"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildMoved:function(2)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes such that its position relative to its siblings changes. The `DataSnapshot` passed to the callback will be for the data of the child that has moved. It is also passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildMoved(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "onChildMoved"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildMoved:function(3)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes such that its position relative to its siblings changes. The `DataSnapshot` passed to the callback will be for the data of the child that has moved. It is also passed a second argument which is a string containing the key of the previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildMoved(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ", previousChildName: string | null) => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "name": "onChildMoved"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildRemoved:function(1)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is removed. The `DataSnapshot` passed into the callback will be the old data for the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors - a client calls `set(null)` on that child or one of its ancestors - that child has all of its children removed - there is a query in effect which now filters out the child (because it's sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildRemoved(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback?: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            }
          ],
          "name": "onChildRemoved"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildRemoved:function(2)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is removed. The `DataSnapshot` passed into the callback will be the old data for the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors - a client calls `set(null)` on that child or one of its ancestors - that child has all of its children removed - there is a query in effect which now filters out the child (because it's sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildRemoved(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "onChildRemoved"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onChildRemoved:function(3)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is removed. The `DataSnapshot` passed into the callback will be the old data for the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors - a client calls `set(null)` on that child or one of its ancestors - that child has all of its children removed - there is a query in effect which now filters out the child (because it's sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot and a string containing the key of the previous child, by sort order, or `null` if it is the first child.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChildRemoved(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "name": "onChildRemoved"
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/database!OnDisconnect:class",
          "docComment": "/**\n * The `onDisconnect` class allows you to write or clear data when your client disconnects from the Database server. These updates occur whether your client disconnects cleanly or not, so you can rely on them to clean up data even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in applications where it is useful to detect how many clients are connected and when other clients disconnect. See {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript} for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be transferred to the Database server, these functions should be called before writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an operation to occur each time a disconnect occurs, you'll need to re-establish the `onDisconnect` operations each time you reconnect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class OnDisconnect "
            }
          ],
          "releaseTag": "Public",
          "name": "OnDisconnect",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!OnDisconnect#cancel:member(1)",
              "docComment": "/**\n * Cancels all previously queued `onDisconnect()` set or update events for this location and all children.\n *\n * If a write has been queued for this location via a `set()` or `update()` at a parent location, the write at this location will be canceled, though writes to sibling locations will still occur.\n *\n * @returns Resolves when synchronization to the server is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancel(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "cancel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!OnDisconnect#remove:member(1)",
              "docComment": "/**\n * Ensures the data at this location is deleted when the client is disconnected (due to closing the browser, navigating to a new page, or network issues).\n *\n * @returns Resolves when synchronization to the server is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remove"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!OnDisconnect#set:member(1)",
              "docComment": "/**\n * Ensures the data at this location is set to the specified value when the client is disconnected (due to closing the browser, navigating to a new page, or network issues).\n *\n * `set()` is especially useful for implementing \"presence\" systems, where a value should be changed or cleared when a user disconnects so that they appear \"offline\" to other users. See {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript} for more information.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an operation to occur each time a disconnect occurs, you'll need to re-establish the `onDisconnect` operations each time.\n *\n * @param value - The value to be written to this location on disconnect (can be an object, array, string, number, boolean, or null).\n *\n * @returns Resolves when synchronization to the Database is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!OnDisconnect#setWithPriority:member(1)",
              "docComment": "/**\n * Ensures the data at this location is set to the specified value and priority when the client is disconnected (due to closing the browser, navigating to a new page, or network issues).\n *\n * @param value - The value to be written to this location on disconnect (can be an object, array, string, number, boolean, or null).\n *\n * @param priority - The priority to be written (string, number, or null).\n *\n * @returns Resolves when synchronization to the Database is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setWithPriority(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", priority: "
                },
                {
                  "kind": "Content",
                  "text": "number | string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "priority",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setWithPriority"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!OnDisconnect#update:member(1)",
              "docComment": "/**\n * Writes multiple values at this location when the client is disconnected (due to closing the browser, navigating to a new page, or network issues).\n *\n * The `values` argument contains multiple property-value pairs that will be written to the Database together. Each child property can either be a simple property (for example, \"name\") or a relative path (for example, \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update only the referenced properties at the current location (instead of replacing all the child properties at the current location).\n *\n * @param values - Object containing multiple values.\n *\n * @returns Resolves when synchronization to the Database is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(values: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "values",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "update"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onDisconnect:function(1)",
          "docComment": "/**\n * Returns an `OnDisconnect` object - see {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript} for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onDisconnect(ref: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "OnDisconnect",
              "canonicalReference": "@firebase/database!OnDisconnect:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "onDisconnect"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onValue:function(1)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this location, and then trigger again each time the data changes. The `DataSnapshot` passed to the callback will be for the location at which `on()` was called. It won't trigger until the entire contents has been synchronized. If the location has no data, it will be triggered with an empty `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onValue(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback?: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            }
          ],
          "name": "onValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onValue:function(2)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this location, and then trigger again each time the data changes. The `DataSnapshot` passed to the callback will be for the location at which `on()` was called. It won't trigger until the entire contents has been synchronized. If the location has no data, it will be triggered with an empty `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onValue(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "onValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!onValue:function(3)",
          "docComment": "/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback will be triggered for the initial data and again whenever the data changes. Invoke the returned unsubscribe callback to stop receiving updates. See {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web} for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this location, and then trigger again each time the data changes. The `DataSnapshot` passed to the callback will be for the location at which `on()` was called. It won't trigger until the entire contents has been synchronized. If the location has no data, it will be triggered with an empty `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n *\n * @param callback - A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot.\n *\n * @param cancelCallback - An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred.\n *\n * @param options - An object that can be used to configure `onlyOnce`, which then removes the listener after its first invocation.\n *\n * @returns A function that can be invoked to remove the listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onValue(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(snapshot: "
            },
            {
              "kind": "Reference",
              "text": "DataSnapshot",
              "canonicalReference": "@firebase/database!DataSnapshot:class"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", cancelCallback: "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "ListenOptions",
              "canonicalReference": "@firebase/database!ListenOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/database!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "cancelCallback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "name": "onValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!orderByChild:function(1)",
          "docComment": "/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()` multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly. However, if you know in advance what your indexes will be, you can define them via the .indexOn rule in your Security Rules for better performance. See the{@link https://firebase.google.com/docs/database/security/indexing-data} rule for more information.\n *\n * You can read more about `orderByChild()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function orderByChild(path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "orderByChild"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!orderByKey:function(1)",
          "docComment": "/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function orderByKey(): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "orderByKey"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!orderByPriority:function(1)",
          "docComment": "/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by ordinary properties (see {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data} for alternatives to priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function orderByPriority(): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "orderByPriority"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!orderByValue:function(1)",
          "docComment": "/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function orderByValue(): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "orderByValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!push:function(1)",
          "docComment": "/**\n * Generates a new child location using a unique key and returns its `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the generated location. If you don't pass a value, nothing is written to the database and the child remains empty (but you can use the `Reference` elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the resulting list of items is chronologically sorted. The keys are also designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}. See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n *\n * @param value - Optional value to be written at the generated location.\n *\n * @returns Combined `Promise` and `Reference`; resolves when write is complete, but can be used immediately as the `Reference` to the child location.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function push(parent: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", value?: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ThenableReference",
              "canonicalReference": "@firebase/database!ThenableReference:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "parent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "push"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!query:function(1)",
          "docComment": "/**\n * Creates a new immutable instance of `Query` that is extended to also include additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n *\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n *\n * @throws\n *\n * if any of the provided query constraints cannot be combined with the existing or new constraints.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function query(query: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", ...queryConstraints: "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@firebase/database!Query:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "queryConstraints",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "query"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/database!Query:interface",
          "docComment": "/**\n * A `Query` sorts and filters the data at a Database location so only a subset of the child data is included. This can be used to order a collection of data by some attribute (for example, height of dinosaurs) as well as to restrict a large list of items (for example, chat messages) down to a number suitable for synchronizing to the client. Queries are created by chaining together one or more of the filter methods defined here.\n *\n * Just as with a `DatabaseReference`, you can receive data from a `Query` by using the `on*()` methods. You will only receive events and `DataSnapshot`s for the subset of the data that matches your query.\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data} for more information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface Query "
            }
          ],
          "releaseTag": "Public",
          "name": "Query",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/database!Query#isEqual:member(1)",
              "docComment": "/**\n * Returns whether or not the current and provided queries represent the same location, have the same query parameters, and are from the same instance of `FirebaseApp`.\n *\n * Two `DatabaseReference` objects are equivalent if they represent the same location and are from the same instance of `FirebaseApp`.\n *\n * Two `Query` objects are equivalent if they represent the same location, have the same query parameters, and are from the same instance of `FirebaseApp`. Equivalent queries share the same sort order, limits, and starting and ending points.\n *\n * @param other - The query to compare against.\n *\n * @returns Whether or not the current and provided queries are equivalent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEqual(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Query",
                  "canonicalReference": "@firebase/database!Query:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "isEqual"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/database!Query#ref:member",
              "docComment": "/**\n * The `DatabaseReference` for the `Query`'s location.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ref: "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseReference",
                  "canonicalReference": "@firebase/database!DatabaseReference:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ref",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/database!Query#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n *\n * @returns A JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/database!Query#toString:member(1)",
              "docComment": "/**\n * Gets the absolute URL for this location.\n *\n * The `toString()` method returns a URL that is ready to be put into a browser, curl command, or a `refFromURL()` call. Since all of those expect the URL to be url-encoded, `toString()` returns an encoded URL.\n *\n * Append '.json' to the returned URL when typed into a browser to download JSON-formatted data. If the location is secured (that is, not publicly readable), you will get a permission-denied error.\n *\n * @returns The absolute URL for this location.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/database!QueryConstraint:class",
          "docComment": "/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a Database query. `QueryConstraint`s are created by invoking {@link endAt}, {@link endBefore}, {@link startAt}, {@link startAfter}, {@link limitToFirst}, {@link limitToLast}, {@link orderByChild}, {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} , {@link orderByValue} or {@link equalTo} and can then be passed to {@link query} to create a new query instance that also contains this `QueryConstraint`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class QueryConstraint "
            }
          ],
          "releaseTag": "Public",
          "name": "QueryConstraint",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!QueryConstraint#type:member",
              "docComment": "/**\n * The type of this query constraints\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryConstraintType",
                  "canonicalReference": "@firebase/database!QueryConstraintType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@firebase/database!QueryConstraintType:type",
          "docComment": "/**\n * Describes the different query constraints available in this SDK.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type QueryConstraintType = "
            },
            {
              "kind": "Content",
              "text": "'endAt' | 'endBefore' | 'startAt' | 'startAfter' | 'limitToFirst' | 'limitToLast' | 'orderByChild' | 'orderByKey' | 'orderByPriority' | 'orderByValue' | 'equalTo'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "QueryConstraintType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!ref:function(1)",
          "docComment": "/**\n * Returns a `Reference` representing the location in the Database corresponding to the provided path. If no path is provided, the `Reference` will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n *\n * @param path - Optional path representing the location the returned `Reference` will point. If not provided, the returned `Reference` will point to the root of the Database.\n *\n * @returns If a path is provided, a `Reference` pointing to the provided path. Otherwise, a `Reference` pointing to the root of the Database.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ref(db: "
            },
            {
              "kind": "Reference",
              "text": "Database",
              "canonicalReference": "@firebase/database!Database:class"
            },
            {
              "kind": "Content",
              "text": ", path?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "db",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "ref"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!refFromURL:function(1)",
          "docComment": "/**\n * Returns a `Reference` representing the location in the Database corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n *\n * @param url - The Firebase URL at which the returned `Reference` will point.\n *\n * @returns A `Reference` pointing to the provided Firebase URL.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function refFromURL(db: "
            },
            {
              "kind": "Reference",
              "text": "Database",
              "canonicalReference": "@firebase/database!Database:class"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "db",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "refFromURL"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!remove:function(1)",
          "docComment": "/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding event 'value' will be triggered. Synchronization of the remove to the Firebase servers will also be started, and the returned Promise will resolve when complete. If provided, the onComplete callback will be called asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n *\n * @returns Resolves when remove on server is complete.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function remove(ref: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "remove"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!runTransaction:function(1)",
          "docComment": "/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which just overwrites the data regardless of its previous value, `runTransaction()` is used to modify the existing value to a new value, ensuring there are no conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is used to transform the current value into a new value. If another client writes to the location before your new value is successfully written, your update function will be called again with the new current value, and the write will be retried. This will happen repeatedly until your write succeeds without conflict or you abort the transaction by not returning a value from your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at that location, so extreme care should be taken if mixing `set()` and `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be aware that a client needs `.read` access in addition to `.write` access in order to perform a transaction. This is because the client-side nature of transactions requires the client to read the data in order to transactionally update it.\n *\n * @param ref - The location to atomically modify.\n *\n * @param transactionUpdate - A developer-supplied function which will be passed the current data stored at this location (as a JavaScript object). The function should return the new value it would like written (as a JavaScript object). If `undefined` is returned (i.e. you return with no arguments) the transaction will be aborted and the data at this location will not be modified.\n *\n * @param options - An options object to configure transactions.\n *\n * @returns A `Promise` that can optionally be used instead of the `onComplete` callback to handle success and failure.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runTransaction(ref: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", transactionUpdate: "
            },
            {
              "kind": "Content",
              "text": "(currentData: any) => unknown"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "TransactionOptions",
              "canonicalReference": "@firebase/database!TransactionOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransactionResult",
              "canonicalReference": "@firebase/database!TransactionResult:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "transactionUpdate",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "runTransaction"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!serverTimestamp:function(1)",
          "docComment": "/**\n * Returns a placeholder value for auto-populating the current timestamp (time since the Unix epoch, in milliseconds) as determined by the Firebase servers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serverTimestamp(): "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "serverTimestamp"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!set:function(1)",
          "docComment": "/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of the data to the Firebase servers will also be started, and the returned Promise will resolve when complete. If provided, the `onComplete` callback will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely, all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions at that location, so extreme care should be taken if mixing `set()` and `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where the `set()` was performed.\n *\n * @param ref - The location to write to.\n *\n * @param value - The value to be written (string, number, boolean, object, array, or null).\n *\n * @returns Resolves when write to server is complete.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function set(ref: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "set"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!setPriority:function(1)",
          "docComment": "/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by ordinary properties (see {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data} ).\n *\n * @param ref - The location to write to.\n *\n * @param priority - The priority to be written (string, number, or null).\n *\n * @returns Resolves when write to server is complete.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPriority(ref: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", priority: "
            },
            {
              "kind": "Content",
              "text": "string | number | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "priority",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "setPriority"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!setWithPriority:function(1)",
          "docComment": "/**\n * Writes data the Database location. Like `set()` but also specifies the priority for that data.\n *\n * Applications need not use priority but can order collections by ordinary properties (see {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data} ).\n *\n * @param ref - The location to write to.\n *\n * @param value - The value to be written (string, number, boolean, object, array, or null).\n *\n * @param priority - The priority to be written (string, number, or null).\n *\n * @returns Resolves when write to server is complete.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setWithPriority(ref: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", priority: "
            },
            {
              "kind": "Content",
              "text": "string | number | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "priority",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "setWithPriority"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!startAfter:function(1)",
          "docComment": "/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()` allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children with a value greater than the specified value will be included in the query. If a key is specified, then children must have a value greater than or equal to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string.\n *\n * @param key - The child key to start after. This argument is only allowed if ordering by child, value, or priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function startAfter(value: "
            },
            {
              "kind": "Content",
              "text": "number | string | boolean | null"
            },
            {
              "kind": "Content",
              "text": ", key?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "startAfter"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!startAt:function(1)",
          "docComment": "/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()` allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value will be included in the query. The optional key argument can be used to further limit the range of the query. If it is specified, then children that have exactly the specified value must also have a key name greater than or equal to the specified key.\n *\n * You can read more about `startAt()` in {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string.\n *\n * @param key - The child key to start at. This argument is only allowed if ordering by child, value, or priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function startAt(value?: "
            },
            {
              "kind": "Content",
              "text": "number | string | boolean | null"
            },
            {
              "kind": "Content",
              "text": ", key?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "QueryConstraint",
              "canonicalReference": "@firebase/database!QueryConstraint:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "startAt"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/database!ThenableReference:interface",
          "docComment": "/**\n * A `Promise` that can also act as a `DatabaseReference` when returned by {@link push}. The reference is available immediately and the `Promise` resolves as the write to the backend completes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface ThenableReference extends "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ">, 'then' | 'catch'> "
            }
          ],
          "releaseTag": "Public",
          "name": "ThenableReference",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/database!TransactionOptions:interface",
          "docComment": "/**\n * An options object to configure transactions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface TransactionOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/database!TransactionOptions#applyLocally:member",
              "docComment": "/**\n * By default, events are raised each time the transaction update function runs. So if it is run multiple times, you may see intermediate states. You can set this to false to suppress these intermediate states and instead wait until the transaction has completed before events are raised.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly applyLocally?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "applyLocally",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/database!TransactionResult:class",
          "docComment": "/**\n * A type for the resolve value of {@link runTransaction}.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TransactionResult "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionResult",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!TransactionResult#committed:member",
              "docComment": "/**\n * Whether the transaction was successfully committed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly committed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "committed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/database!TransactionResult#snapshot:member",
              "docComment": "/**\n * The resulting data snapshot.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly snapshot: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSnapshot",
                  "canonicalReference": "@firebase/database!DataSnapshot:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "snapshot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/database!TransactionResult#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@firebase/database!Unsubscribe:type",
          "docComment": "/**\n * A callback that can invoked to remove a listener.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Unsubscribe = "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Unsubscribe",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/database!update:function(1)",
          "docComment": "/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be written to the Database together. Each child property can either be a simple property (for example, \"name\") or a relative path (for example, \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update only the referenced properties at the current location (instead of replacing all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding events ('value', 'child_added', etc.) will be triggered. Synchronization of the data to the Firebase servers will also be started, and the returned Promise will resolve when complete. If provided, the `onComplete` callback will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location where the `update()` was performed, regardless of how many children were modified.\n *\n * Note that modifying data with `update()` will cancel any pending transactions at that location, so extreme care should be taken if mixing `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n *\n * @param values - Object containing multiple values.\n *\n * @returns Resolves when update on server is complete.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function update(ref: "
            },
            {
              "kind": "Reference",
              "text": "DatabaseReference",
              "canonicalReference": "@firebase/database!DatabaseReference:interface"
            },
            {
              "kind": "Content",
              "text": ", values: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "values",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "update"
        }
      ]
    }
  ]
}
